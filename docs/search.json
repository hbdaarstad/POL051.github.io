[
  {
    "objectID": "descstats.html",
    "href": "descstats.html",
    "title": "Descriptive Statistics Using Tidyverse",
    "section": "",
    "text": "Now that we know some basic ways to manipulate the data frame, lets look at different way to do basic descriptive statistics! In this section we will be using the function, summarize(). This function is similar to the mutate function, except instead of adding a variable, it makes a new data frame based on existing variables. You will also see the function group_by(). This function allows us to organize the data by telling it to group things by a variable(s). Essentially, the functions splits things into groups.\nFor this example we are going to find the total points for each team in the 2023 season!\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nTeamStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(year==2023) |&gt;\n  group_by(constructor) |&gt;\n  summarize(\n    total_points = sum(points)\n  )\n\nprint(TeamStandings_2023)\n\n# A tibble: 10 × 2\n   constructor    total_points\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Alfa Romeo               16\n 2 AlphaTauri               22\n 3 Alpine F1 Team          110\n 4 Aston Martin            266\n 5 Ferrari                 363\n 6 Haas F1 Team              9\n 7 McLaren                 266\n 8 Mercedes                374\n 9 Red Bull                790\n10 Williams                 26\n\n\n\nTeamStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(year==2023) |&gt;\n  group_by(constructor) |&gt;\n  summarize(\n    total_points = sum(points)\n  ) |&gt;\n  arrange(desc(total_points))\n\nprint(TeamStandings_2023)\n\n# A tibble: 10 × 2\n   constructor    total_points\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Red Bull                790\n 2 Mercedes                374\n 3 Ferrari                 363\n 4 Aston Martin            266\n 5 McLaren                 266\n 6 Alpine F1 Team          110\n 7 Williams                 26\n 8 AlphaTauri               22\n 9 Alfa Romeo               16\n10 Haas F1 Team              9\n\n\nWhat if we wanted to know the percentage of points each driver contributed to the teams total?\n\nTeamStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(year==2023) |&gt;\n  group_by(constructor) |&gt;\n  mutate(total_points = sum(points, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;  # Ungroup to avoid issues with the next group_by\n  group_by(surname) |&gt;\n  summarize(\n  perc_points = sum(points, na.rm = TRUE) / unique(total_points) * 100)  |&gt;\n  arrange(desc(perc_points))\n\nprint(TeamStandings_2023)\n\n# A tibble: 22 × 2\n   surname    perc_points\n   &lt;chr&gt;            &lt;dbl&gt;\n 1 Albon             96.2\n 2 Alonso            74.4\n 3 Norris            69.2\n 4 Verstappen        67.1\n 5 Hülkenberg        66.7\n 6 Tsunoda           63.6\n 7 Bottas            62.5\n 8 Hamilton          58.0\n 9 Leclerc           51.0\n10 Ocon              50.9\n# ℹ 12 more rows",
    "crumbs": [
      "Tidyverse Descriptive Statistics",
      "Descriptive Statistics Using Tidyverse"
    ]
  },
  {
    "objectID": "filter.html",
    "href": "filter.html",
    "title": "Filtering and Selecting Data",
    "section": "",
    "text": "In the following coding examples, you will see three important functions, a pipe, select(), and filter(). First, a pipe is written as a %&gt;% or |&gt;. Pipes are a powerful tool that help us clearly expressing a sequence of functions. Pipes tell R that you want to use a designated set for a chain of functions that build off of each other. A way to think about is in math terms.\n$$\n\\[ F(G(H(X))), X=Data\\]\n$$\nIn this series of functions, the first step is you solve \\(H(X)\\), then using that solution you solve \\(G()\\), then after you solve \\(F()\\). The final output is the solution of those chain of events with the information of \\(X\\). This is how pipes work! Pipes use a set of information, typically a data frame, and then apply it to a series of functions that build off each other.\n\nIn the following example, I use the select() and filter() to simplify the data. The select() allows me to select certain variables from the data and eliminate the rest. filter() does something similar but instead of variables, it allows me to simplify the data based on values based on a set of programmed logical operators. In my first example, I select for the circuit, year, constructor, surname of the driver, and the number of points awarded during that race. I use the unique() to remove duplicates, and then I filter for the race information for the constructor McLaren during the 2023 season.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n\nrace_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023)\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname points\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;\n 1 Bahrain International Circuit   2023 McLaren     Norris       0\n 2 Jeddah Corniche Circuit         2023 McLaren     Norris       0\n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri      0\n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris       8\n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri      4\n 6 Baku City Circuit               2023 McLaren     Norris       2\n 7 Baku City Circuit               2023 McLaren     Piastri      0\n 8 Miami International Autodrome   2023 McLaren     Norris       0\n 9 Miami International Autodrome   2023 McLaren     Piastri      0\n10 Circuit de Monaco               2023 McLaren     Norris       2\n# ℹ 30 more rows\n\n\nWhat if we wanted two different constructors? Then we want to use the logical operator for | and also differentiate it from the next instruction for filter by using a , or (). In the example bellow, I filter for the race information for the constructor Mercades and Red Bull during the 2021 season.\n\nrace_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n    unique() |&gt;\n    filter(constructor == \"Mercades\" |  constructor == \"Red Bull\", year == 2021) |&gt;\n    print()\n\n# A tibble: 40 × 5\n   circuit                             year constructor surname    points\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Losail International Circuit        2021 Red Bull    Pérez          12\n 2 Losail International Circuit        2021 Red Bull    Verstappen     19\n 3 Bahrain International Circuit       2021 Red Bull    Pérez          10\n 4 Bahrain International Circuit       2021 Red Bull    Verstappen     18\n 5 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Pérez           0\n 6 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Verstappen     25\n 7 Autódromo Internacional do Algarve  2021 Red Bull    Pérez          12\n 8 Autódromo Internacional do Algarve  2021 Red Bull    Verstappen     18\n 9 Circuit de Barcelona-Catalunya      2021 Red Bull    Pérez          10\n10 Circuit de Barcelona-Catalunya      2021 Red Bull    Verstappen     19\n# ℹ 30 more rows\n\n\nHowever, if we wanted to use the modified data, we could not because it is not saved. If we want to use this data we need to save it as a new object!\n\nseason_2021 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n    unique() |&gt;\n    filter(constructor == \"Mercades\" |  constructor == \"Red Bull\", year == 2021) |&gt;\n    print()\n\n# A tibble: 40 × 5\n   circuit                             year constructor surname    points\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Losail International Circuit        2021 Red Bull    Pérez          12\n 2 Losail International Circuit        2021 Red Bull    Verstappen     19\n 3 Bahrain International Circuit       2021 Red Bull    Pérez          10\n 4 Bahrain International Circuit       2021 Red Bull    Verstappen     18\n 5 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Pérez           0\n 6 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Verstappen     25\n 7 Autódromo Internacional do Algarve  2021 Red Bull    Pérez          12\n 8 Autódromo Internacional do Algarve  2021 Red Bull    Verstappen     18\n 9 Circuit de Barcelona-Catalunya      2021 Red Bull    Pérez          10\n10 Circuit de Barcelona-Catalunya      2021 Red Bull    Verstappen     19\n# ℹ 30 more rows\n\n\nNow, we can use this information!",
    "crumbs": [
      "Tidyverse Descriptive Statistics",
      "Filtering and Selecting Data"
    ]
  },
  {
    "objectID": "baserstats.html",
    "href": "baserstats.html",
    "title": "Base R Descriptive Statistics",
    "section": "",
    "text": "Packages are collections of R functions, data, and code compiled in a well-defined format. R functions are like the verbs of the R coding language, they tell your computer what action to make with sets of information. A function is usually defined by a keyword and then parenthesis. Functions can be built by yourself or pre-built.\nSome packages come pre-installed in R, hwoever, the majority do not, so you need to install them first using the r function install.packages\ninstall.packages(\"tidyverse\") # first install this package\ninstall.packages(\"remotes\") # second install this package to download the data\nAfter installing the packages we need to attach the package. You will always need to reattach the a package in order to use it when you restart R. You can do this by using the function library() and the name of the package.\nIn the following examples we will be using a collection of data sets I have cleaned and you will download by using the following code:\n# This line of code installs a data package saved on github that I\n# created\nremotes::install_github(\"hbdaarstad/RandomData\")\nNow, we can begin using functions found in the tidyverse package and data from my package RandomData. Let’s work with our first data set, race_stats.\n?race_stats # description of the data",
    "crumbs": [
      "Base R Descriptive Statistics"
    ]
  },
  {
    "objectID": "baserstats.html#picturing-the-data",
    "href": "baserstats.html#picturing-the-data",
    "title": "Base R Descriptive Statistics",
    "section": "Picturing the Data",
    "text": "Picturing the Data\nThe head() and str() allow us to get a snap shot of the data and see what is in it and what data types we are working with. head() shows us the first six observations of each variable, while str() shows us the structure of each variable.\n\ndat &lt;- race_stats\n\nhead(dat)  \n\n# A tibble: 6 × 30\n  constructorId raceId driverId statusId circuitId race_name        year circuit\n          &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;  \n1             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n2             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n3             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n4             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n5             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n6             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n# ℹ 22 more variables: country &lt;chr&gt;, alt &lt;dbl&gt;, points &lt;dbl&gt;, laps &lt;dbl&gt;,\n#   fastestLapTime &lt;chr&gt;, fastestLapSpeed &lt;chr&gt;, constructor &lt;chr&gt;,\n#   constructor_nationality &lt;chr&gt;, forename &lt;chr&gt;, surname &lt;chr&gt;,\n#   driver_nationality &lt;chr&gt;, status &lt;chr&gt;, lap_number &lt;dbl&gt;, time &lt;dbl&gt;,\n#   pitlap_number &lt;dbl&gt;, pitnumber &lt;dbl&gt;, pit_time &lt;dbl&gt;, duration &lt;chr&gt;,\n#   quali_position &lt;dbl&gt;, q1 &lt;chr&gt;, q2 &lt;chr&gt;, q3 &lt;chr&gt;\n\n\n\nstr(dat) # structure of dataset\n\nspc_tbl_ [630,584 × 30] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ constructorId          : num [1:630584] 1 1 1 1 1 1 1 1 1 1 ...\n $ raceId                 : num [1:630584] 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 ...\n $ driverId               : num [1:630584] 4 4 4 4 4 4 4 4 4 4 ...\n $ statusId               : num [1:630584] 11 11 11 11 11 11 11 11 11 11 ...\n $ circuitId              : num [1:630584] 11 11 11 11 11 11 11 11 11 11 ...\n $ race_name              : chr [1:630584] \"Hungarian Grand Prix\" \"Hungarian Grand Prix\" \"Hungarian Grand Prix\" \"Hungarian Grand Prix\" ...\n $ year                   : num [1:630584] 2018 2018 2018 2018 2018 ...\n $ circuit                : chr [1:630584] \"Hungaroring\" \"Hungaroring\" \"Hungaroring\" \"Hungaroring\" ...\n $ country                : chr [1:630584] \"Hungary\" \"Hungary\" \"Hungary\" \"Hungary\" ...\n $ alt                    : num [1:630584] 264 264 264 264 264 264 264 264 264 264 ...\n $ points                 : num [1:630584] 4 4 4 4 4 4 4 4 4 4 ...\n $ laps                   : num [1:630584] 69 69 69 69 69 69 69 69 69 69 ...\n $ fastestLapTime         : chr [1:630584] \"1:22.090\" \"1:22.090\" \"1:22.090\" \"1:22.090\" ...\n $ fastestLapSpeed        : chr [1:630584] \"192.125\" \"192.125\" \"192.125\" \"192.125\" ...\n $ constructor            : chr [1:630584] \"McLaren\" \"McLaren\" \"McLaren\" \"McLaren\" ...\n $ constructor_nationality: chr [1:630584] \"British\" \"British\" \"British\" \"British\" ...\n $ forename               : chr [1:630584] \"Fernando\" \"Fernando\" \"Fernando\" \"Fernando\" ...\n $ surname                : chr [1:630584] \"Alonso\" \"Alonso\" \"Alonso\" \"Alonso\" ...\n $ driver_nationality     : chr [1:630584] \"Spanish\" \"Spanish\" \"Spanish\" \"Spanish\" ...\n $ status                 : chr [1:630584] \"+1 Lap\" \"+1 Lap\" \"+1 Lap\" \"+1 Lap\" ...\n $ lap_number             : num [1:630584] 68 15 55 44 27 38 4 33 67 36 ...\n $ time                   : num [1:630584] 4920 5040 5100 5100 4980 4980 5160 5040 5100 4980 ...\n $ pitlap_number          : num [1:630584] 39 39 39 39 39 39 39 39 39 39 ...\n $ pitnumber              : num [1:630584] 1 1 1 1 1 1 1 1 1 1 ...\n $ pit_time               : num [1:630584] 58107 58107 58107 58107 58107 ...\n $ duration               : chr [1:630584] \"21.795\" \"21.795\" \"21.795\" \"21.795\" ...\n $ quali_position         : num [1:630584] 11 11 11 11 11 11 11 11 11 11 ...\n $ q1                     : chr [1:630584] \"1:18.208\" \"1:18.208\" \"1:18.208\" \"1:18.208\" ...\n $ q2                     : chr [1:630584] \"1:35.214\" \"1:35.214\" \"1:35.214\" \"1:35.214\" ...\n $ q3                     : chr [1:630584] \"\\\\N\" \"\\\\N\" \"\\\\N\" \"\\\\N\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   constructorId = col_double(),\n  ..   raceId = col_double(),\n  ..   driverId = col_double(),\n  ..   statusId = col_double(),\n  ..   circuitId = col_double(),\n  ..   race_name = col_character(),\n  ..   year = col_double(),\n  ..   circuit = col_character(),\n  ..   country = col_character(),\n  ..   alt = col_double(),\n  ..   points = col_double(),\n  ..   laps = col_double(),\n  ..   fastestLapTime = col_character(),\n  ..   fastestLapSpeed = col_character(),\n  ..   constructor = col_character(),\n  ..   constructor_nationality = col_character(),\n  ..   forename = col_character(),\n  ..   surname = col_character(),\n  ..   driver_nationality = col_character(),\n  ..   status = col_character(),\n  ..   lap_number = col_double(),\n  ..   time = col_double(),\n  ..   pitlap_number = col_double(),\n  ..   pitnumber = col_double(),\n  ..   pit_time = col_double(),\n  ..   duration = col_character(),\n  ..   quali_position = col_double(),\n  ..   q1 = col_character(),\n  ..   q2 = col_character(),\n  ..   q3 = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt;",
    "crumbs": [
      "Base R Descriptive Statistics"
    ]
  },
  {
    "objectID": "baserstats.html#base-r-descriptive-stat-functions",
    "href": "baserstats.html#base-r-descriptive-stat-functions",
    "title": "Base R Descriptive Statistics",
    "section": "Base R Descriptive Stat Functions",
    "text": "Base R Descriptive Stat Functions\nFirst, let’s find the minimum speed recorded and the maximum speed recorded during the fastest laps for each race. Since fastest lap time is a character we need to change it from a character to a numeric value and lets remove any NAs.\n\n# change NA to 0s and to numeric\ndat$fastestLapSpeed &lt;-as.numeric(\n    ifelse(dat$fastestLapSpeed &gt;= 0, dat$fastestLapSpeed, 0)\n    )\n\n\nMin and Max\n\nmin(dat$fastestLapSpeed)\n\n[1] 0\n\nmax(dat$fastestLapSpeed)\n\n[1] 255.014\n\nrange(dat$fastestLapSpeed)\n\n[1]   0.000 255.014\n\n\nMean\n\nThe mean is average value of all the numbers in a set.\n\n\n\nmean(dat$fastestLapSpeed)\n\n[1] 201.4552\n\n\n\nMedian\n\nThe median is the middle value in a set of numbers when they are ordered from least to greatest.\n\n\n\nmedian(dat$fastestLapSpeed)\n\n[1] 203.003\n\n\n\nFirst and Third Quartiles\n\nThe first quartile range is the value under which 25 percent of the data points are found when they are arranged in increasing order, and the third quartile range is where 75 percent of the data points are found when they are arranged in increasing order\n\n\n\nquantile(dat$fastestLapSpeed, 0.25)\n\n    25% \n191.142 \n\nquantile(dat$fastestLapSpeed, 0.75)\n\n    75% \n214.339 \n\n\n\nIQR\n\nThe IQR is the difference between the first and third quartile.\n\n\n\nIQR(dat$fastestLapSpeed)\n\n[1] 23.197\n\n\n\nStandard Deviation and Variance\n\nVariance is the average squared difference between data points in a set, which measures how much the values in a set vary from each other. While Standard Deviation is the measure of how far the values in a set are from the mean\n\n\n\nsd(dat$fastestLapSpeed)\n\n[1] 23.22281\n\nvar(dat$fastestLapSpeed)\n\n[1] 539.2991",
    "crumbs": [
      "Base R Descriptive Statistics"
    ]
  },
  {
    "objectID": "boxplot.html",
    "href": "boxplot.html",
    "title": "Box Plots",
    "section": "",
    "text": "Boxplots (or box-and-whisker plots) are useful to graphically summarise the distribution of a variable, identify potential unusual values and compare distributions between different groups. We use the function boxplot() .\nTo set up this boxplot, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023. I will use this new variable and make it numeric, calling it final_position_numeric.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) |&gt;\n  mutate(final_position_numeric = as.numeric(final_position))\n\n# boxplot(data$y ~ data$x, \n#               col = \"color\", \n#               main = \"Main Title\",\n#               ylab = \"Label Y-axsis\",\n#               xlab = \"Label X-axsis\")\n\nIn the example we will be using, plots the final position standings for the two McLaren Drivers during the 2023 season.\n\n# Boxplot for average race result in 2023 for McLaren Drivers\nboxplot(McLarenStandings_2023$final_position_numeric ~ McLarenStandings_2023$surname, \n        # add color for each driver\n        col = c(\"orange\", \"grey\"), \n        # add title\n        main = \"McLaren Race Results\", \n        # add title for y-axsis\n        ylab = \"Final Position\", \n        # add title on x-axsis\n        xlab = \"Driver\")\n\n\n\n\n\n\n\n\nThe thick horizontal line in the middle of the box is the median of the final positions for the two drivers. The upper line of the box is the upper quartile, the 75th percentile, and the lower line is the lower quartile, the 25th percentile. The distance between the upper and lower quartiles is known as the inter quartile range and represents where 50 percent of final position standings on average were for the two drivers. The dotted vertical lines are called the whiskers and their length is determined as 1.5 x the inter quartile range and any points outside the whiskers are potential outliers.",
    "crumbs": [
      "Base R Data Visualization",
      "Box Plots"
    ]
  },
  {
    "objectID": "boxplot.html#box-plots",
    "href": "boxplot.html#box-plots",
    "title": "Box Plots",
    "section": "",
    "text": "Boxplots (or box-and-whisker plots) are useful to graphically summarise the distribution of a variable, identify potential unusual values and compare distributions between different groups. We use the function boxplot() .\nTo set up this boxplot, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023. I will use this new variable and make it numeric, calling it final_position_numeric.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) |&gt;\n  mutate(final_position_numeric = as.numeric(final_position))\n\n# boxplot(data$y ~ data$x, \n#               col = \"color\", \n#               main = \"Main Title\",\n#               ylab = \"Label Y-axsis\",\n#               xlab = \"Label X-axsis\")\n\nIn the example we will be using, plots the final position standings for the two McLaren Drivers during the 2023 season.\n\n# Boxplot for average race result in 2023 for McLaren Drivers\nboxplot(McLarenStandings_2023$final_position_numeric ~ McLarenStandings_2023$surname, \n        # add color for each driver\n        col = c(\"orange\", \"grey\"), \n        # add title\n        main = \"McLaren Race Results\", \n        # add title for y-axsis\n        ylab = \"Final Position\", \n        # add title on x-axsis\n        xlab = \"Driver\")\n\n\n\n\n\n\n\n\nThe thick horizontal line in the middle of the box is the median of the final positions for the two drivers. The upper line of the box is the upper quartile, the 75th percentile, and the lower line is the lower quartile, the 25th percentile. The distance between the upper and lower quartiles is known as the inter quartile range and represents where 50 percent of final position standings on average were for the two drivers. The dotted vertical lines are called the whiskers and their length is determined as 1.5 x the inter quartile range and any points outside the whiskers are potential outliers.",
    "crumbs": [
      "Base R Data Visualization",
      "Box Plots"
    ]
  },
  {
    "objectID": "layout.html",
    "href": "layout.html",
    "title": "Layout of R",
    "section": "",
    "text": "There are four primary quadrants in RStudio:\n\nSource pane\nConsole pane\nEnvironment pane\nOutput pane\n\n\n\n\nRStudio Layout\n\n\nThe source pane allows us to edit and view various code-related files, such as .R, .rmd, .qmd, .py, .css, or general text files such as .txt or .md.\n\nTo open an existing file, use either the File → Open File… menu or the Recent Files menu to select from recently opened files.\nYou can create a new file via the File → New File menu.\n\nThe console pane provides an area to interactively execute code.\nThe environment pane includes the Environment, History, Connections, Build, and Version Control System (VCS) tabs and displays any currently saved objects.\nThe output pane displays various outputs, such as plots, and contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs.",
    "crumbs": [
      "Setting up R",
      "Layout of R"
    ]
  },
  {
    "objectID": "objects.html",
    "href": "objects.html",
    "title": "Creating Objects",
    "section": "",
    "text": "In R, we save our data in what we call objects! Objects store information about different types of elements. If you know any other coding languages, they typically call these variables.\n# The &lt;- saves the caculation as math\nmath &lt;- 10 + 2\n#print()\nprint(math)\n\n[1] 12\n# The = saves the caculation as math\nmath = 10 + 2\n# print() will print out what is saved in the object math\nprint(math)\n\n[1] 12",
    "crumbs": [
      "Base R Syntax",
      "Creating Objects"
    ]
  },
  {
    "objectID": "tidytime.html",
    "href": "tidytime.html",
    "title": "Time Series",
    "section": "",
    "text": "geom_line() in ggplot2 is used to create a line plot by connecting data points with a continuous line, which is ideal for visualizing trends over time. It is particularly useful for time series data because it clearly shows how a variable changes across ordered time intervals, allowing for easy identification of patterns and trends.\n\n#| include: false\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n\n?constructors_stats\n\n# Calculate total wins per year for Ferrari\nferrari_wins &lt;- constructors_stats |&gt;\n  filter(constructor == \"Ferrari\") |&gt;\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(constructor_wins)))\n\nggplot(ferrari_wins, aes(x = year, y = total_wins)) +\n  geom_line(color = \"red\", linewidth = 1.2) +  # Creates a red line plot\n  labs(title = \"Ferrari Wins 1958 to 2024 (Before the Summer Break)\", \n       x = \"Year\", \n       y = \"Wins\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\naes(x = year, y = total_wins):\n\nx = year: Puts the years on the x-axis.\ny = total_wins: Puts the total number of wins on the y-axis.\n\ngeom_line(color = \"red\", linewidth = 1.2):\n\ngeom_line(): Creates a line plot instead of points.\ncolor = \"red\": Adds a color to the line\nlinewidth = 1.2: Makes the line slightly thicker for better visibility.",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Time Series"
    ]
  },
  {
    "objectID": "tidytime.html#time-series",
    "href": "tidytime.html#time-series",
    "title": "Time Series",
    "section": "",
    "text": "geom_line() in ggplot2 is used to create a line plot by connecting data points with a continuous line, which is ideal for visualizing trends over time. It is particularly useful for time series data because it clearly shows how a variable changes across ordered time intervals, allowing for easy identification of patterns and trends.\n\n#| include: false\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n\n?constructors_stats\n\n# Calculate total wins per year for Ferrari\nferrari_wins &lt;- constructors_stats |&gt;\n  filter(constructor == \"Ferrari\") |&gt;\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(constructor_wins)))\n\nggplot(ferrari_wins, aes(x = year, y = total_wins)) +\n  geom_line(color = \"red\", linewidth = 1.2) +  # Creates a red line plot\n  labs(title = \"Ferrari Wins 1958 to 2024 (Before the Summer Break)\", \n       x = \"Year\", \n       y = \"Wins\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\naes(x = year, y = total_wins):\n\nx = year: Puts the years on the x-axis.\ny = total_wins: Puts the total number of wins on the y-axis.\n\ngeom_line(color = \"red\", linewidth = 1.2):\n\ngeom_line(): Creates a line plot instead of points.\ncolor = \"red\": Adds a color to the line\nlinewidth = 1.2: Makes the line slightly thicker for better visibility.",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Time Series"
    ]
  },
  {
    "objectID": "timeseries.html",
    "href": "timeseries.html",
    "title": "Times Series",
    "section": "",
    "text": "A time series plot looks at a variable over time to see trends. To make a time series graph, we use the same function as scatter plots, plot(), however, we change the type of graph from a point to a line graph. We can do this by changing the type = in the function from a type = \"p\" to a type = \"l\". In addition, the variable on the x-axis should always be a variable that measures time.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n# Time Series Plot\n# plot(data$y ~ data$timevariable,\n#                type =\"l\",\n#                col = \"color\", \n#               main = \"Main Title\",\n#               ylab = \"Label Y-axsis\",\n#               xlab = \"Label X-axsis\")\n\nIn the following example, we look at the total wins for Ferrari drivers over time.\n\n# Calculate total wins per year for Ferrari\nferrari_wins &lt;- constructors_stats |&gt;\n  filter(constructor == \"Ferrari\") |&gt;\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(constructor_wins)))\n\n## Make Time Series plot\nplot(ferrari_wins$total_wins ~ ferrari_wins$year,\n     # make it a line not points\n     type = \"l\", \n     # add color\n     col = c(\"red\"), \n     # change width of the line\n     lwd = 2, \n     # add main title\n     main = \"Ferrari Wins 1958 to 2024 (Before the Summer Break)\",\n      # add title on x-axsis\n     xlab = \"Year\", \n      # add title on y-axsis\n     ylab = \"Wins\")",
    "crumbs": [
      "Base R Data Visualization",
      "Times Series"
    ]
  },
  {
    "objectID": "timeseries.html#time-series",
    "href": "timeseries.html#time-series",
    "title": "Times Series",
    "section": "",
    "text": "A time series plot looks at a variable over time to see trends. To make a time series graph, we use the same function as scatter plots, plot(), however, we change the type of graph from a point to a line graph. We can do this by changing the type = in the function from a type = \"p\" to a type = \"l\". In addition, the variable on the x-axis should always be a variable that measures time.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n# Time Series Plot\n# plot(data$y ~ data$timevariable,\n#                type =\"l\",\n#                col = \"color\", \n#               main = \"Main Title\",\n#               ylab = \"Label Y-axsis\",\n#               xlab = \"Label X-axsis\")\n\nIn the following example, we look at the total wins for Ferrari drivers over time.\n\n# Calculate total wins per year for Ferrari\nferrari_wins &lt;- constructors_stats |&gt;\n  filter(constructor == \"Ferrari\") |&gt;\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(constructor_wins)))\n\n## Make Time Series plot\nplot(ferrari_wins$total_wins ~ ferrari_wins$year,\n     # make it a line not points\n     type = \"l\", \n     # add color\n     col = c(\"red\"), \n     # change width of the line\n     lwd = 2, \n     # add main title\n     main = \"Ferrari Wins 1958 to 2024 (Before the Summer Break)\",\n      # add title on x-axsis\n     xlab = \"Year\", \n      # add title on y-axsis\n     ylab = \"Wins\")",
    "crumbs": [
      "Base R Data Visualization",
      "Times Series"
    ]
  },
  {
    "objectID": "whyr.html",
    "href": "whyr.html",
    "title": "Why R?",
    "section": "",
    "text": "R is a coding language language and environment built for statistical computing and graphics that includes a large variety in statistical and graphical techniques. Essentially, R gives us as political scientists an effective way to store and handle data, and a large selection of data analysis tools including graphing tools in a coherent and effective language. R has its own “enviornment,” an area for us to write the code and see outputs, but the majority of users will use Rstudio and IDE or integrated development environment. Rstudio is a software application with a code editor, compiler, debugger, and project manager in a single interface that allows us to write, edit, compile, and debug code in a singular location. Furthermore, in order to use R and Rstudio you will need to download both.",
    "crumbs": [
      "Introduction to R",
      "Why R?"
    ]
  },
  {
    "objectID": "basics-summary.html",
    "href": "basics-summary.html",
    "title": "Introduction to R",
    "section": "",
    "text": "R is a coding language language and environment built for statistical computing and graphics that includes a large variety in statistical and graphical techniques. Essentially, R gives us as political scientists an effective way to store and handle data, and a large selection of data analysis tools including graphing tools in a coherent and effective language. R has its own “enviornment,” an area for us to write the code and see outputs, but the majority of users will use Rstudio and IDE or integrated development environment. Rstudio is a software application with a code editor, compiler, debugger, and project manager in a single interface that allows us to write, edit, compile, and debug code in a singular location. Furthermore, in order to use R and Rstudio you will need to download both.",
    "crumbs": [
      "Introduction to R"
    ]
  },
  {
    "objectID": "basics-summary.html#why-r",
    "href": "basics-summary.html#why-r",
    "title": "Introduction to R",
    "section": "",
    "text": "R is a coding language language and environment built for statistical computing and graphics that includes a large variety in statistical and graphical techniques. Essentially, R gives us as political scientists an effective way to store and handle data, and a large selection of data analysis tools including graphing tools in a coherent and effective language. R has its own “enviornment,” an area for us to write the code and see outputs, but the majority of users will use Rstudio and IDE or integrated development environment. Rstudio is a software application with a code editor, compiler, debugger, and project manager in a single interface that allows us to write, edit, compile, and debug code in a singular location. Furthermore, in order to use R and Rstudio you will need to download both.",
    "crumbs": [
      "Introduction to R"
    ]
  },
  {
    "objectID": "basics-summary.html#downloading-r",
    "href": "basics-summary.html#downloading-r",
    "title": "Introduction to R",
    "section": "Downloading R",
    "text": "Downloading R\nR is freely maintained by an international team of developers and is available through The Comprehensive R Archive Network. Follow the instructions below to download R. If you are using an older computer or iPad, skip to 1.4 Using Posit Cloud for R.\n\nGo to The Comprehensive R Archive Network webpage:\n\nhttps://cran.r-project.org\n\nTo install R on Windows, click the “Download R for Windows” link.\nTo install R on a Mac, click the “Download R for Mac” link.",
    "crumbs": [
      "Introduction to R"
    ]
  },
  {
    "objectID": "basics-summary.html#downloading-rstudio",
    "href": "basics-summary.html#downloading-rstudio",
    "title": "Introduction to R",
    "section": "Downloading RStudio",
    "text": "Downloading RStudio\nOne way to picture what RStudio does is to compare it to Microsoft Word, a software application that allows us to write documents. RStudio, instead of being a platform to write text, helps us write in the coding language R. Follow the instructions below to download RStudio.\n\nGo to the Posit RStudio Desktop page.\nTo install for Mac:\n\nScroll to the button that says “Install R on a Mac,” and click the “Download R for Mac OS 13+” link.\nIf you’re using an older version, click the “Previous Versions” link to find a version that works with your computer.\n\nTo install for Windows:\n\nScroll to the button that says “Install R on Windows 10/11,” and click the link to download.",
    "crumbs": [
      "Introduction to R"
    ]
  },
  {
    "objectID": "basics-summary.html#using-posit-cloud-for-r",
    "href": "basics-summary.html#using-posit-cloud-for-r",
    "title": "Introduction to R",
    "section": "Using Posit Cloud for R",
    "text": "Using Posit Cloud for R\nPosit Cloud is the most common cloud service used when working with RStudio and is free up to a point.\n\nFirst, choose the “Cloud Free” plan.\nSecond, follow the Posit Cloud instructions to log in.\nThird, go to the “Tutorial” tab in the upper right corner, scroll to the bottom, and select “Getting Started with Tutorials,” then press the “Start Tutorial” button.\nYou will work in a singular RProject space for the majority of the class.",
    "crumbs": [
      "Introduction to R"
    ]
  },
  {
    "objectID": "scatter.html",
    "href": "scatter.html",
    "title": "Scatter Plots",
    "section": "",
    "text": "The first plot style we will be looking at is a scatter plot. To plot a scatter plot you will use the most common function in base r to plot it, plot() .\n\n# plot(x, y,\n#       xlab = \"Independent Variable (x)\", # Label for the x-axis\n#       ylab = \"Dependent Variable (y)\", # Label for the y-axis\n#       xlim = c(0, 12), # Limits for the x-axis\n#       ylim = c(0, 120), # Limits for the y-axis\n#       main = \"Scatterplot of the Relationship between X and Y\", \n#               Main title of the plot\n#       col = \"black\", # Color of the points\n#       pch = 19) # Shape of points\n\nIn the following example, we will plot the qualifying position for the 20 drivers and the final points they were awarded for the Las Vegas Grand Prix in 2023.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nscatterplot &lt;- race_stats |&gt;\n  filter(circuit == \"Las Vegas Strip Street Circuit\" & year == \"2023\")\n\nplot(scatterplot$quali_position, scatterplot$points,\n     xlab= \"Qualifying Position\",\n     ylab= \"Points Awarded\",\n     xlim = c(0, 20),\n     ylim = c(0, 25), \n     main = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\",\n     col = \"black\", \n     pch = 19)\n\n\n\n\n\n\n\n\nIf you wanted to add a line that shows the correlation we can do this by adding the lines() after the plot.\n\nplot(scatterplot$quali_position, scatterplot$points,\n     xlab= \"Qualifying Position\",\n     ylab= \"Points Awarded\",\n     xlim = c(0, 20),\n     ylim = c(0, 25), \n     main = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\",\n     col = \"black\", \n     pch = 19)\nlines(lowess(scatterplot$quali_position, scatterplot$points), col = \"red\")",
    "crumbs": [
      "Base R Data Visualization",
      "Scatter Plots"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome! This is a website that provides an overview of R for the POL 051: The Scientific Study of Politics Class at the University of California, Davis.\nThis provides an overview of what is R, setting up R, basic R syntax, Base R, and tidyverse to build a foundation to apply these tools to answer critical questions about Political Science.\nThis website is still under construction at the moment, and there will be mistakes or things not included yet in the final sections. Furthermore, if you see any mistakes please let me know so I can adjust and fix them!",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "stats_base.html",
    "href": "stats_base.html",
    "title": "Base R Descriptive Stats",
    "section": "",
    "text": "First, let’s find the minimum speed recorded and the maximum speed recorded during the fastest laps for each race. Since fastest lap time is a character we need to change it from a character to a numeric value and lets remove any NAs.\n\nlibrary(RandomData)\ndat &lt;- race_stats\n\n# change NA to 0s and to numeric\ndat$fastestLapSpeed &lt;-as.numeric(\n    ifelse(dat$fastestLapSpeed &gt;= 0, dat$fastestLapSpeed, 0)\n    )\n\n\nMin and Max\n\nmin(dat$fastestLapSpeed)\n\n[1] 0\n\nmax(dat$fastestLapSpeed)\n\n[1] 255.014\n\nrange(dat$fastestLapSpeed)\n\n[1]   0.000 255.014\n\n\nMean\n\nThe mean is average value of all the numbers in a set.\n\n\n\nmean(dat$fastestLapSpeed)\n\n[1] 201.4552\n\n\n\nMedian\n\nThe median is the middle value in a set of numbers when they are ordered from least to greatest.\n\n\n\nmedian(dat$fastestLapSpeed)\n\n[1] 203.003\n\n\n\nFirst and Third Quartiles\n\nThe first quartile range is the value under which 25 percent of the data points are found when they are arranged in increasing order, and the third quartile range is where 75 percent of the data points are found when they are arranged in increasing order\n\n\n\nquantile(dat$fastestLapSpeed, 0.25)\n\n    25% \n191.142 \n\nquantile(dat$fastestLapSpeed, 0.75)\n\n    75% \n214.339 \n\n\n\nIQR\n\nThe IQR is the difference between the first and third quartile.\n\n\n\nIQR(dat$fastestLapSpeed)\n\n[1] 23.197\n\n\n\nStandard Deviation and Variance\n\nVariance is the average squared difference between data points in a set, which measures how much the values in a set vary from each other. While Standard Deviation is the measure of how far the values in a set are from the mean\n\n\n\nsd(dat$fastestLapSpeed)\n\n[1] 23.22281\n\nvar(dat$fastestLapSpeed)\n\n[1] 539.2991",
    "crumbs": [
      "Base R Descriptive Statistics",
      "Base R Descriptive Stats"
    ]
  },
  {
    "objectID": "regressions.html",
    "href": "regressions.html",
    "title": "Linear Regressions",
    "section": "",
    "text": "OLS\nOLS (Ordinary Least Squares) helps us fit a line to the data to best explain how one variable (X) affects another variable (Y)\nLinear regression is the most commonly used approach for modeling\n\nIt involves a numerical outcome variable, y, and explanatory variables, x, that are either numerical or categorical.\nWe assume the relationship between X and Y is linear (a line) Useful for prediction and explanation.\n\n\\[\nY_i = \\alpha + \\beta X + u_i\n\\]\nWe use sample data to make inferences about the population of interest, therefore our regression formula is:\n\\[\n\\hat Y_i = \\hat\\alpha + \\hat\\beta X + \\hat u_i\n\\]\nThe hat (^) are indicators of a sample data not the true population estimate.\n\nY: dependent, outcome variable\nX: independent, explanatory variable\n𝜶  and β: are the parameter estimates\n\n𝜶 : The predicted value of Y when X= 0 (intercept)\nβ: how much Y changes for a one-unit increase in X (slope)\n\n\nWe use linear regressions to estimate how x changes are y! Therefore, how we interpret the estimate, β, is determined by whether our x value is a categorical or continuous variable.\nHere is the formula to Interpreting Regressions:\n\nContinuous Variable -&gt; Look at the slope!\n\nWhen X increases 1 unit, Y increases by 𝛽\nUsually, you can ignore the intercept The intercept is the average value of Y when X =0.\n\nDummy/Categorical Variable -&gt; Compare it with the baseline category (aka intercept)\n\nWhen X is in the given category, average Y value is higher by 𝛽 compared to the average Y value for baseline X.\nThe intercept is the average Y value for the baseline category.\n\n\n\n\n\n\n\n\n\n\nType\nApproach\nInterpetation\n\n\n\n\nContinious\nA one unit increase in X, SLOPE unit change in Y.\nFor every ___ (replace with unit value) increase in ___ (replace with X value) results in ___ (replace with estimate/slope) unit change in ___ (replace with Y, or outcome value)\n\n\nCategorical\nThe category is SLOPE unites higher/lower than the intercept.\nThe ___ (replace with categorical value) is ___ (replace with estimate/slope) higher/lower than ___ (replace with baseline/intercept)\n\n\n\nThe function to calculate this in R is: lm()\nExample:\nI will be using the same randomly generated data as the correlations examples.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nset.seed(123)\n\nage &lt;- sample(18:100, 100, replace = TRUE)\ngender &lt;- sample(c(1, 0), 100, replace = TRUE)  # 1 = Female, 0 = Male\nkids &lt;- sample(0:5, 100, replace = TRUE)\n\n# Now build the data.frame with dependent vars defined inline\ndata &lt;- data.frame(\n  age = age,\n  gender = gender,\n  height = rnorm(100, mean = 5.5, sd = 0.75) + gender * -0.25,\n  kids = kids,\n  income = rnorm(100, mean = 45000, sd = 10000) + age * 1000 + gender * (-2000) + kids * (-3000),\n  years_edu = sample(10:23, 100, replace = TRUE) + age * 1 + gender * 2\n)\n\nhead(data)\n\n  age gender   height kids    income years_edu\n1  48      1 4.578477    1  82225.32        63\n2  96      1 4.266899    2 153024.83       121\n3  68      0 6.997910    0 113667.01        89\n4  31      1 5.700532    0  92668.52        49\n5  84      0 4.561546    4 103490.97        97\n6  59      0 5.041626    4  92209.84        81\n\n\nFirst, we will doing a simple linear regression with only one X value. Y is our outcome variable and X is our explantory variable. it will look like the following:\nlm(y ~ x, data)\n\n# categorical interpetation\nmodel1 &lt;- lm(height ~ gender, data)\n\nsummary(model1)\n\n\nCall:\nlm(formula = height ~ gender, data = data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.40414 -0.47142 -0.07808  0.44609  1.70882 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  5.51099    0.09734  56.616   &lt;2e-16 ***\ngender      -0.17425    0.14352  -1.214    0.228    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.7153 on 98 degrees of freedom\nMultiple R-squared:  0.01482,   Adjusted R-squared:  0.004766 \nF-statistic: 1.474 on 1 and 98 DF,  p-value: 0.2276\n\n\nOur estimate, how much x changes y, is -0.17, and our baseline, Male’s height, is 5.51 feet, which we can interpret as the following:\nMen are on average 5.51 feet high, and women are on average 0.17 feet shorter than Men.\nHowever, we can not say according to our data that gender is correlated with height, since according to our P-value column, our p-value is 0.228, which is more than 0.05.\n\n# continious interpetation\nmodel2 &lt;- lm(income ~ age, data)\n\nsummary(model2)\n\n\nCall:\nlm(formula = income ~ age, data = data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-28480.3  -7731.4    436.7   7645.8  30540.6 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 34967.79    3405.90   10.27   &lt;2e-16 ***\nage          1045.02      53.15   19.66   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 12550 on 98 degrees of freedom\nMultiple R-squared:  0.7977,    Adjusted R-squared:  0.7957 \nF-statistic: 386.5 on 1 and 98 DF,  p-value: &lt; 2.2e-16\n\n\nWe want to look at the column with the estimate first, this tells us our intercept and estimate.\nOur estimate, how much x changes y, is 1045.02, and our intercept is 34,967.79, which we can interpret as the following:\nAt 18 years old (which is the lowest age we have), income is 34,967.79, and for every year older, an individuals income increases by 1045.02 dollars.\nIn additon, we can say according to our data that age is correlated with income, since according to our P-value column, our p-value is &lt;2e-16, which is less than 0.05.\nIn addition you can see *** after our p-value, this tells us the level of significance, the more stars the stronger the significance.\n\n\nMultivariate Linear Regressions\nNow, we have just been looking at one explanatory variable, however, you may want to look are more than one and also consider that there maybe outside influence that you need to control for.\nFurthermore, you may want to add more x variables. To do this, you can do the following:\nlm(y ~ x1 + x2 + x3 + ... + xn , data)\nNow, lets look at an example, but first, lets make some random generated data real quick!\n\n# What if we have a confounding variable?\n\n# This will be our confounding variable\nweekly_exercise &lt;- rnorm(100,5,2)\n\n# lets make our new dataframe\ndf_confound &lt;- tibble(income_scale = (rnorm(100,30000,10000) + 10000*weekly_exercise)/1000,\n                      age = rnorm(100,35,10),\n                      # this is another function that creats a binary variable based on probability \n                      female = rbinom(100,1,.5),\n                      heart_health = 60 + 10*weekly_exercise - 1*age + 8*female + rnorm(100,0,10))\n\n# regression model\nmodel3 &lt;- lm(heart_health ~ income_scale + age + female, df_confound)\nsummary(model3)\n\n\nCall:\nlm(formula = heart_health ~ income_scale + age + female, data = df_confound)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-25.394  -8.562  -0.513   8.813  36.603 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  51.69599    6.64099   7.784 8.10e-12 ***\nincome_scale  0.72808    0.05986  12.162  &lt; 2e-16 ***\nage          -0.91499    0.12930  -7.077 2.41e-10 ***\nfemale        7.54097    2.80779   2.686  0.00853 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 13.21 on 96 degrees of freedom\nMultiple R-squared:   0.68, Adjusted R-squared:   0.67 \nF-statistic: 67.99 on 3 and 96 DF,  p-value: &lt; 2.2e-16\n\n# visual\ndf_confound |&gt;\n  ggplot(aes(x = income_scale, y = heart_health)) + \n  geom_point()\n\n\n\n\n\n\n\n\nOkay! There is something wrong with this model yes? We know income scale doesn’t actually impact heart health, rather this is done through weekly exercise! To take this into account we can do the following:\n\nmodel.fix &lt;- lm(heart_health ~ weekly_exercise + income_scale + age + female,df_confound)\nsummary(model.fix)\n\n\nCall:\nlm(formula = heart_health ~ weekly_exercise + income_scale + \n    age + female, data = df_confound)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-24.8789  -7.5206  -0.6986   7.2529  25.7713 \n\nCoefficients:\n                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     61.75064    5.56561  11.095  &lt; 2e-16 ***\nweekly_exercise  9.62967    1.34813   7.143 1.84e-10 ***\nincome_scale     0.01537    0.11096   0.139     0.89    \nage             -1.01886    0.10584  -9.626 1.04e-15 ***\nfemale           9.36947    2.29096   4.090 9.04e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.71 on 95 degrees of freedom\nMultiple R-squared:  0.7918,    Adjusted R-squared:  0.783 \nF-statistic: 90.32 on 4 and 95 DF,  p-value: &lt; 2.2e-16\n\ndf_confound |&gt;\n  ggplot(aes(x=weekly_exercise,y = heart_health)) + \n  geom_point()+\n  # lets add a line based on using a linear regression\n  geom_smooth(method =\"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nNow, income is no longer correlated!\n\n\nPrediction\nWe can also use linear regressions to make predictions. Using the crossing() and augment() functions, we can predict an outcome using our new models.\nLets use our model from our last example. In the crossing function we put our values from our hypothetical person, and then using the augment function it calculates our predicted heart health from our values and our model.\n\n#install.packages(\"broom\")\nlibrary(broom)\n\nmodel &lt;- lm(heart_health ~ weekly_exercise + age + female,df_confound)\nsummary(model.fix)\n\n\nCall:\nlm(formula = heart_health ~ weekly_exercise + income_scale + \n    age + female, data = df_confound)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-24.8789  -7.5206  -0.6986   7.2529  25.7713 \n\nCoefficients:\n                Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)     61.75064    5.56561  11.095  &lt; 2e-16 ***\nweekly_exercise  9.62967    1.34813   7.143 1.84e-10 ***\nincome_scale     0.01537    0.11096   0.139     0.89    \nage             -1.01886    0.10584  -9.626 1.04e-15 ***\nfemale           9.36947    2.29096   4.090 9.04e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 10.71 on 95 degrees of freedom\nMultiple R-squared:  0.7918,    Adjusted R-squared:  0.783 \nF-statistic: 90.32 on 4 and 95 DF,  p-value: &lt; 2.2e-16\n\nscen &lt;- crossing(weekly_exercise = 10, age = 35, female = 1)\n\naugment(model, newdata = scen)\n\n# A tibble: 1 × 4\n  weekly_exercise   age female .fitted\n            &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;\n1              10    35      1    134.\n\n\nOur predicted heart health is 130.0878.",
    "crumbs": [
      "Random Data Generation and Hypothesis Testing",
      "Linear Regressions"
    ]
  },
  {
    "objectID": "hist.html",
    "href": "hist.html",
    "title": "Histograms",
    "section": "",
    "text": "Frequency histograms are useful when you want to get an idea about the distribution of values in a numeric variable. The hist() is the function that plots histograms and takes a numeric vector as its main argument.\nTo set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) \n\n# hist(data$x, \n#            col = \"color\", \n#            main = \"Main Title\",\n#            xlab = \"Label X-axsis\")\n\nIn the following example, we will look at the distribution of the final positions of the Mclaren 2023 season for both of their drivers.\n\n# change from a character to numeric\nMcLarenStandings_2023 &lt;- McLarenStandings_2023 |&gt;\n  mutate(final_position_numeric = ifelse(final_position == \"DNF\", 0, as.numeric(final_position)))\n\n# make histogram\nhist(McLarenStandings_2023$final_position_numeric, \n  # change color\n  col = \"orange\", \n  # add main title\n  main = \"McLaren Race Results 2023\", \n  # add title on x-axsis\n  xlab = \"Race Results\")",
    "crumbs": [
      "Base R Data Visualization",
      "Histograms"
    ]
  },
  {
    "objectID": "hist.html#histograms",
    "href": "hist.html#histograms",
    "title": "Histograms",
    "section": "",
    "text": "Frequency histograms are useful when you want to get an idea about the distribution of values in a numeric variable. The hist() is the function that plots histograms and takes a numeric vector as its main argument.\nTo set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) \n\n# hist(data$x, \n#            col = \"color\", \n#            main = \"Main Title\",\n#            xlab = \"Label X-axsis\")\n\nIn the following example, we will look at the distribution of the final positions of the Mclaren 2023 season for both of their drivers.\n\n# change from a character to numeric\nMcLarenStandings_2023 &lt;- McLarenStandings_2023 |&gt;\n  mutate(final_position_numeric = ifelse(final_position == \"DNF\", 0, as.numeric(final_position)))\n\n# make histogram\nhist(McLarenStandings_2023$final_position_numeric, \n  # change color\n  col = \"orange\", \n  # add main title\n  main = \"McLaren Race Results 2023\", \n  # add title on x-axsis\n  xlab = \"Race Results\")",
    "crumbs": [
      "Base R Data Visualization",
      "Histograms"
    ]
  },
  {
    "objectID": "ttest.html",
    "href": "ttest.html",
    "title": "T-Tests",
    "section": "",
    "text": "Difference of Means: A t-test compares the means of two groups. If you expect a specific difference between the two group means (e.g., one group is greater or lesser than the other), you should consider whether this difference is one-sided or two-sided:\n\nOne-tailed t-test: Used when you expect the difference in one specific direction (e.g., group1 &gt; group2 or group1 &lt; group2).\nTwo-tailed t-test: Used when you’re interested in testing if there is any significant difference between the means, regardless of the direction of the difference.\n\nWhen choosing between a two-tailed or one-tailed t-test, it is crucial to determine whether your hypothesis suggests a directional difference—meaning, do you expect one group to be higher or lower than the other? If your hypothesis is directional, you should use a one-tailed t-test and specify one of the following options for the alternative argument:\n\nIf you expect Group 1 to have higher values than Group 2: t.test(group1, group2, alternative = \"greater\")\nIf you expect Group 1 to have lower values than Group 2: t.test(group1, group2, alternative = \"less\")\nIf you’re testing for any difference without specifying a direction: t.test(group1, group2, alternative = \"two.sided\")\n\n\nExample 1: One-tailed t-test in Positive Direction\nA political science research team conducted a study to evaluate the impact of a new voter mobilization campaign in two countries: Country 1 and Country 2. The goal of the campaign was to increase voter turnout in elections, particularly among underrepresented groups. To assess the effectiveness of the campaign, the researchers established two groups in each country:\n\nTreatment Group: Individuals who were exposed to the new voter mobilization campaign.\nControl Group: Individuals who were not exposed to the campaign (received no special outreach or encouragement).\n\nThe researchers hypothesized that the voter mobilization campaign would significantly increase voter turnout in both countries.\nUsing a random sample of 100 individuals from each group in both countries, the team collected data on voter turnout, measured as the percentage of individuals who voted in the last election. Below are the generated data distributions for each group:\n\nCountry 1:\n\nTreatment Group: 100 individuals who were exposed to the mobilization campaign, with an average voter turnout of 50% (standard deviation of 10%).\nControl Group: 100 individuals who were not exposed to the campaign, with an average voter turnout of 45% (standard deviation of 10%).\n\nCountry 2:\n\nTreatment Group: 100 individuals who were exposed to the mobilization campaign, with an average voter turnout of 52% (standard deviation of 9%).\nControl Group: 100 individuals who were not exposed to the campaign, with an average voter turnout of 43% (standard deviation of 8%).\n\n\nThe research team proposed the following hypotheses:\n\nNull Hypothesis (H0): There is no significant difference in voter turnout between the treatment and control groups in either country.\nAlternative Hypothesis (H1): The treatment group will have a significantly higher voter turnout compared to the control group in each country.\n\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Generate random data for two groups\ncountry1_treat &lt;- rnorm(100, mean = 50, sd = 10) \ncountry1_control &lt;- rnorm(100, mean = 45, sd = 10)   \n\ncountry2_treat &lt;- rnorm(100, mean = 52, sd = 9) \ncountry2_control &lt;- rnorm(100, mean = 43, sd = 8)   \n\n\n# Conducting t-tests\ncountryA_ttest &lt;- t.test(country1_treat, country1_control,\nalternative = \"greater\")\n\ncountryB_ttest &lt;- t.test(country2_treat, country2_control,\nalternative = \"greater\")\n\n\n# printing results\ncountryA_ttest\n\n\n    Welch Two Sample t-test\n\ndata:  country1_treat and country1_control\nt = 5.2487, df = 197.35, p-value = 1.97e-07\nalternative hypothesis: true difference in means is greater than 0\n95 percent confidence interval:\n 4.781929      Inf\nsample estimates:\nmean of x mean of y \n 50.90406  43.92453 \n\n\nThe results indicate that there is a statistically significant difference between the treatment and control groups in Country 1.\n\n# printing results\ncountryB_ttest\n\n\n    Welch Two Sample t-test\n\ndata:  country2_treat and country2_control\nt = 8.7012, df = 197.84, p-value = 6.385e-16\nalternative hypothesis: true difference in means is greater than 0\n95 percent confidence interval:\n 8.403679      Inf\nsample estimates:\nmean of x mean of y \n 53.08419  42.71022 \n\n\nThe results for Country 2 indicate an even stronger statistically significant difference between the treatment and control groups compared to Country 1.\n\n\nExample 2: One-tailed t-test in Negative Direction\nA group of International Relations scholars is conducting a study to evaluate the effect of foreign aid on democratic engagement in developing countries. The scholars hypothesize that countries receiving foreign aid with conditions attached, such as promoting democratic reforms, will show lower levels of government funding into public goods programs compared to countries that do not receive such aid.\nThe research involves two groups:\n\nGroup 1 (Treatment Group): Countries that received foreign aid (e.g., aid for health care, anti-corruption measures, or election monitoring programs).\nGroup 2 (Control Group): Countries that did not receive foreign aid or received aid.\n\nThe researchers expect that Group 1 will see decreased funding for public goods programs than Group 2, which may not benefit from the same level of external support for public goods.\n\nData Generation:\n\nTo test this hypothesis, the research team randomly samples 100 countries for each group, measuring voter turnout as a key indicator of democratic engagement in the most recent national elections. The data is simulated as follows:\n\nGroup 1 (Treatment Group):\n\nAverage Public Goods: 10.1 (mean in the millions for funded public goods) with some variation (standard deviation = 10%).\nThese countries received foreign aid related to public goods.\n\nGroup 2 (Control Group):\n\nAverage Voter Turnout: 15.3 (mean in the millions for funded public goods) with some variation (standard deviation = 10%).\nThese countries did not receive foreign aid related to public goods.\n\n\n\nHypothesis:\nNull Hypothesis (H0): There is no significant difference in funding for public goods between countries that received aid and those that did not.\nAlternative Hypothesis (H1): The treatment group (Group 1) has decreased funding for public goods programs than the control group (Group 2) due to the impact of foreign aid (i.e., Group 1’s mean is greater than Group 2’s mean).\n\n\n# Generate random data for two groups\ngroup1 &lt;- rnorm(100, mean = 10.1, sd = 10)  # Group 1 with mean 40 and sd 10\ngroup2 &lt;- rnorm(100, mean = 15.3, sd = 10)  # Group 2 with mean 50 and sd 10\n\n# Conducting t-tests\nttest &lt;- t.test(group1, group2,\nalternative = \"less\")\n\nttest\n\n\n    Welch Two Sample t-test\n\ndata:  group1 and group2\nt = -2.7265, df = 197.46, p-value = 0.003488\nalternative hypothesis: true difference in means is less than 0\n95 percent confidence interval:\n      -Inf -1.464626\nsample estimates:\nmean of x mean of y \n 11.15851  14.87700 \n\n\n\nInterpreting One-Tailed T-test Results\n\n\nt-Value (t = -4.5413):\nThe t-value is the test statistic that measures the difference between the sample means relative to the variation in the sample data. A larger absolute t-value indicates a more significant difference between the two groups. Here, the t-value of -4.5413 is quite large (in negative value), suggesting a substantial difference between the means of the two groups, with Group 1 (mean = 9.87) being significantly lower than Group 2 (mean = 15.97).\nDegrees of Freedom (df = 197.85):\nThe degrees of freedom (df) represent the number of independent values in the calculation. For the Welch Two Sample t-test, this value is based on the sample sizes and variances of both groups. In this case, the degrees of freedom is approximately 197.85.\np-Value (p-value = 4.853e-06):\nThe p-value represents the probability of obtaining results as extreme as the observed results, assuming the null hypothesis is true. For a one-tailed test, a p-value less than 0.05 suggests that the observed difference is statistically significant in the specified direction. Here, the p-value is 4.853e-06, which is far smaller than 0.05. This indicates that we can confidently reject the null hypothesis and conclude that the true difference in means is significantly less than zero—Group 1 has lower values than Group 2.\nAlternative Hypothesis:\nThe alternative hypothesis posits that the true difference in means is less than 0, meaning Group 1 has a lower mean than Group 2. Given the extremely small p-value, there is strong evidence in support of this alternative hypothesis.\n95% Confidence Interval (-Inf, -3.880371):\nThe 95% confidence interval shows the range within which we are 95% confident that the true difference in means lies. In a one-tailed test, the interval is one-sided, extending from negative infinity to approximately -3.88. Since the interval does not include 0, this reinforces the conclusion that the mean of Group 1 is significantly lower than the mean of Group 2.\nSample Estimates:\n\nMean of Group 1 (x): 9.87\nMean of Group 2 (y): 15.97\n\n\nThe results indicate a strong statistically significant difference between the treatment and control groups, thus we can reject the null hypothesis.\n\n\nExample 3: Two-tailed t-test\nA comparative politics research team is studying the impact of political system types (democracy vs. authoritarianism) on citizen satisfaction with governance. The team is specifically interested in understanding if there is a significant difference in how citizens from democratic countries (Group 1) and authoritarian countries (Group 2) perceive their government’s performance, particularly in terms of economic stability, personal freedoms, and governance effectiveness.\nTo explore this, the researchers conducted a survey asking citizens from two sets of countries:\n\nGroup 1 (Democratic Countries): Citizens from countries with democratic systems.\nGroup 2 (Authoritarian Countries): Citizens from countries with authoritarian systems.\n\nThe survey scale measures satisfaction with governance on a scale from 0 to 100, where higher values indicate greater satisfaction with the government’s performance.\n\nHypothesis:\nNull Hypothesis (H0): There is no significant difference in citizen satisfaction between democratic and authoritarian countries (i.e., the means are equal).\nAlternative Hypothesis (H1): There is a significant difference in citizen satisfaction between democratic and authoritarian countries (i.e., the means are different).\n\n\n# Generate random data for two groups\ngroup1 &lt;- rnorm(100, mean = 43, sd = 10)  # Group 1 with mean 43 and sd 10\ngroup2 &lt;- rnorm(100, mean = 45, sd = 10)  # Group 2 with mean 45 and sd 10\n\n# Conducting t-tests\nttest &lt;- t.test(group1, group2,\nalternative = \"two.sided\")\n\nttest\n\n\n    Welch Two Sample t-test\n\ndata:  group1 and group2\nt = -3.1604, df = 197.94, p-value = 0.001823\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -7.397482 -1.712872\nsample estimates:\nmean of x mean of y \n 41.50356  46.05874 \n\n\n\nInterpreting Two-Tailed T-test Results:\n\n\nt-Value (t = -0.59518):\nThe t-value is the test statistic for the t-test, which measures how large the difference between the two groups is relative to the variability in the sample data. A larger absolute t-value indicates a more significant difference. In this case, the t-value of -0.59518 is relatively small, suggesting that there is no substantial difference between the two groups.\nDegrees of Freedom (df = 197.82):\nDegrees of freedom (df) is a parameter used in statistical tests that reflects the number of independent values used in the calculation. For the Welch Two Sample t-test, the degrees of freedom depend on the sample sizes and variances of the two groups. Here, the degrees of freedom are approximately 197.82.\np-Value (p-value = 0.5524):\nThe p-value represents the probability of obtaining results as extreme as the ones observed, assuming the null hypothesis is true. A p-value below 0.05 typically suggests that the observed difference is statistically significant. With a p-value of 0.5524 (much smaller than 0.05), we cannot reject the null hypothesis, concluding that there is no statistically significant difference between the means of the two groups.\nAlternative Hypothesis:\nThe alternative hypothesis posits that the true difference in means is not equal to 0. Given the very low p-value, we have enough evidence to support this alternative hypothesis.\n95% Confidence Interval (-3.761971, 2.017620):\nThe 95% confidence interval provides a range in which we are 95% confident that the true difference in means lies. In this case, the interval spans from about -3.76 to 2.02. Since the interval does not include 0, it strengthens the conclusion that there is a significant difference between the two groups’ means.\nSample Estimates:\n\nMean of x: 43.93590\nMean of y: 44.80807\n\n\nThe results indicate no statistically significant difference between the treatment and control groups, thus we cannot reject the null hypothesis.",
    "crumbs": [
      "Random Data Generation and Hypothesis Testing",
      "T-Tests"
    ]
  },
  {
    "objectID": "basicsyntax.html",
    "href": "basicsyntax.html",
    "title": "rsyntax",
    "section": "",
    "text": "In this section, we will cover the following topics:",
    "crumbs": [
      "Base R Syntax"
    ]
  },
  {
    "objectID": "basicsyntax.html#writing-out-text-vs-numbers",
    "href": "basicsyntax.html#writing-out-text-vs-numbers",
    "title": "rsyntax",
    "section": "Writing out Text vs. Numbers",
    "text": "Writing out Text vs. Numbers\nIn R, to output text you will use single or double quotes:\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n'Hello World!' \n\n[1] \"Hello World!\"\n\n\nTo output numbers you just type out the number. Also, note that I do not use a comma when writing out my four-digit number:\n\n5\n\n[1] 5\n\n75\n\n[1] 75\n\n1000\n\n[1] 1000",
    "crumbs": [
      "Base R Syntax"
    ]
  },
  {
    "objectID": "basicsyntax.html#basic-calculations",
    "href": "basicsyntax.html#basic-calculations",
    "title": "rsyntax",
    "section": "Basic Calculations",
    "text": "Basic Calculations\nR at its core is a gigantic calculator, so let’s practice doing basic calculations.\n\n# addition\n10 + 2\n\n[1] 12\n\n# subtraction\n10 - 2\n\n[1] 8\n\n# multipilication\n10 * 2\n\n[1] 20\n\n# division\n10/2\n\n[1] 5\n\n# exponent\n10^2\n\n[1] 100",
    "crumbs": [
      "Base R Syntax"
    ]
  },
  {
    "objectID": "basicsyntax.html#comments",
    "href": "basicsyntax.html#comments",
    "title": "rsyntax",
    "section": "Comments",
    "text": "Comments\nIt’s also important to annotate your code. It will help you write notes and explain what you are doing. To annotate your code, you will use the number sign #:\n\n# addition\n10 + 2\n\n[1] 12\n\n# the answer is 12",
    "crumbs": [
      "Base R Syntax"
    ]
  },
  {
    "objectID": "basicsyntax.html#creating-objects",
    "href": "basicsyntax.html#creating-objects",
    "title": "rsyntax",
    "section": "Creating Objects",
    "text": "Creating Objects\nIn R, we save our data in what we call objects! Objects store information about different types of elements. If you know any other coding languages, they typically call these variables.\n\n# The &lt;- saves the caculation as math\nmath &lt;- 10 + 2\n#print()\nprint(math)\n\n[1] 12\n\n\n\n# The = saves the caculation as math\nmath = 10 + 2\n# print() will print out what is saved in the object math\nprint(math)\n\n[1] 12",
    "crumbs": [
      "Base R Syntax"
    ]
  },
  {
    "objectID": "basicsyntax.html#data-types",
    "href": "basicsyntax.html#data-types",
    "title": "rsyntax",
    "section": "Data Types",
    "text": "Data Types\nThere are 6 types of data in R that are important to know, but the essential ones are logical, numeric, and character.\nLogical Also known as boolean data, logical data is shown as TRUE or FALSE values:\n\nlogical1 &lt;- TRUE\nlogical2 &lt;- FALSE\n\n# The class() function outputs the data type of the object\nclass(logical1)\n\n[1] \"logical\"\n\nprint(logical2)\n\n[1] FALSE\n\nprint(class(logical2))\n\n[1] \"logical\"\n\n\nNumeric represents all data types that are real numbers with or with out decimal points.\n\nheight &lt;- 5.5\nacres &lt;- 1000\n\nclass(height)\n\n[1] \"numeric\"\n\nprint(acres)\n\n[1] 1000\n\nprint(class(acres))\n\n[1] \"numeric\"\n\n\nCharacter specifies character or string values in a variable such as a singular character ‘A’ or a string of characters in ‘Apple’.\n\n# Use '' or \"\" to show it's a string of characters\nmotorsports &lt;- \"formula1\"\n\nprint(motorsports)\n\n[1] \"formula1\"\n\nprint(class(motorsports))\n\n[1] \"character\"\n\n\nInteger specifies real values without decimal points\n\n# the suffix i specifies its imaginary data.\ncomplex &lt;- 3 + 2i\n\nprint(class(integer))\n\n[1] \"function\"\n\n\nRaw specifies values as raw bytes\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\nprint(class(raw_variable))\n\n[1] \"raw\"\n\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n\n[1] \"Welcome to Programiz\"\n\nprint(class(char_variable))\n\n[1] \"character\"",
    "crumbs": [
      "Base R Syntax"
    ]
  },
  {
    "objectID": "comments.html",
    "href": "comments.html",
    "title": "Comments",
    "section": "",
    "text": "It’s also important to annotate your code. It will help you write notes and explain what you are doing. To annotate your code, you will use the number sign #:\n\n# addition\n10 + 2\n\n[1] 12\n\n# the answer is 12",
    "crumbs": [
      "Base R Syntax",
      "Comments"
    ]
  },
  {
    "objectID": "calc.html",
    "href": "calc.html",
    "title": "Basic Calculations",
    "section": "",
    "text": "R at its core is a gigantic calculator, so let’s practice doing basic calculations.\n\n# addition\n10 + 2\n\n[1] 12\n\n# subtraction\n10 - 2\n\n[1] 8\n\n# multipilication\n10 * 2\n\n[1] 20\n\n# division\n10/2\n\n[1] 5\n\n# exponent\n10^2\n\n[1] 100",
    "crumbs": [
      "Base R Syntax",
      "Basic Calculations"
    ]
  },
  {
    "objectID": "downloading.html",
    "href": "downloading.html",
    "title": "Downloading R and R Studio",
    "section": "",
    "text": "R is freely maintained by an international team of developers and is available through The Comprehensive R Archive Network. Follow the instructions below to download R. If you are using an older computer or iPad, skip to 1.4 Using Posit Cloud for R.\n\nGo to The Comprehensive R Archive Network webpage:\n\nhttps://cran.r-project.org\n\nTo install R on Windows, click the “Download R for Windows” link.\nTo install R on a Mac, click the “Download R for Mac” link.",
    "crumbs": [
      "Introduction to R",
      "Downloading R and R Studio"
    ]
  },
  {
    "objectID": "downloading.html#downloading-r",
    "href": "downloading.html#downloading-r",
    "title": "Downloading R and R Studio",
    "section": "",
    "text": "R is freely maintained by an international team of developers and is available through The Comprehensive R Archive Network. Follow the instructions below to download R. If you are using an older computer or iPad, skip to 1.4 Using Posit Cloud for R.\n\nGo to The Comprehensive R Archive Network webpage:\n\nhttps://cran.r-project.org\n\nTo install R on Windows, click the “Download R for Windows” link.\nTo install R on a Mac, click the “Download R for Mac” link.",
    "crumbs": [
      "Introduction to R",
      "Downloading R and R Studio"
    ]
  },
  {
    "objectID": "downloading.html#downloading-rstudio",
    "href": "downloading.html#downloading-rstudio",
    "title": "Downloading R and R Studio",
    "section": "Downloading RStudio",
    "text": "Downloading RStudio\nOne way to picture what RStudio does is to compare it to Microsoft Word, a software application that allows us to write documents. RStudio, instead of being a platform to write text, helps us write in the coding language R. Follow the instructions below to download RStudio.\n\nGo to the Posit RStudio Desktop page.\nTo install for Mac:\n\nScroll to the button that says “Install R on a Mac,” and click the “Download R for Mac OS 13+” link.\nIf you’re using an older version, click the “Previous Versions” link to find a version that works with your computer.\n\nTo install for Windows:\n\nScroll to the button that says “Install R on Windows 10/11,” and click the link to download.",
    "crumbs": [
      "Introduction to R",
      "Downloading R and R Studio"
    ]
  },
  {
    "objectID": "downloading.html#using-posit-cloud-for-r",
    "href": "downloading.html#using-posit-cloud-for-r",
    "title": "Downloading R and R Studio",
    "section": "Using Posit Cloud for R",
    "text": "Using Posit Cloud for R\nPosit Cloud is the most common cloud service used when working with RStudio and is free up to a point.\n\nFirst, choose the “Cloud Free” plan.\nSecond, follow the Posit Cloud instructions to log in.\nThird, go to the “Tutorial” tab in the upper right corner, scroll to the bottom, and select “Getting Started with Tutorials,” then press the “Start Tutorial” button.\nYou will work in a singular RProject space for the majority of the class.",
    "crumbs": [
      "Introduction to R",
      "Downloading R and R Studio"
    ]
  },
  {
    "objectID": "picturing.html",
    "href": "picturing.html",
    "title": "Picturing the Data",
    "section": "",
    "text": "The head() and str() allow us to get a snap shot of the data and see what is in it and what data types we are working with. head() shows us the first six observations of each variable, while str() shows us the structure of each variable.\n\nlibrary(RandomData)\n\ndat &lt;- race_stats\n\nhead(dat)  \n\n# A tibble: 6 × 30\n  constructorId raceId driverId statusId circuitId race_name        year circuit\n          &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt; &lt;chr&gt;  \n1             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n2             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n3             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n4             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n5             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n6             1   1000        4       11        11 Hungarian Gran…  2018 Hungar…\n# ℹ 22 more variables: country &lt;chr&gt;, alt &lt;dbl&gt;, points &lt;dbl&gt;, laps &lt;dbl&gt;,\n#   fastestLapTime &lt;chr&gt;, fastestLapSpeed &lt;chr&gt;, constructor &lt;chr&gt;,\n#   constructor_nationality &lt;chr&gt;, forename &lt;chr&gt;, surname &lt;chr&gt;,\n#   driver_nationality &lt;chr&gt;, status &lt;chr&gt;, lap_number &lt;dbl&gt;, time &lt;dbl&gt;,\n#   pitlap_number &lt;dbl&gt;, pitnumber &lt;dbl&gt;, pit_time &lt;dbl&gt;, duration &lt;chr&gt;,\n#   quali_position &lt;dbl&gt;, q1 &lt;chr&gt;, q2 &lt;chr&gt;, q3 &lt;chr&gt;\n\n\n\nstr(dat) # structure of dataset\n\nspc_tbl_ [630,584 × 30] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ constructorId          : num [1:630584] 1 1 1 1 1 1 1 1 1 1 ...\n $ raceId                 : num [1:630584] 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 ...\n $ driverId               : num [1:630584] 4 4 4 4 4 4 4 4 4 4 ...\n $ statusId               : num [1:630584] 11 11 11 11 11 11 11 11 11 11 ...\n $ circuitId              : num [1:630584] 11 11 11 11 11 11 11 11 11 11 ...\n $ race_name              : chr [1:630584] \"Hungarian Grand Prix\" \"Hungarian Grand Prix\" \"Hungarian Grand Prix\" \"Hungarian Grand Prix\" ...\n $ year                   : num [1:630584] 2018 2018 2018 2018 2018 ...\n $ circuit                : chr [1:630584] \"Hungaroring\" \"Hungaroring\" \"Hungaroring\" \"Hungaroring\" ...\n $ country                : chr [1:630584] \"Hungary\" \"Hungary\" \"Hungary\" \"Hungary\" ...\n $ alt                    : num [1:630584] 264 264 264 264 264 264 264 264 264 264 ...\n $ points                 : num [1:630584] 4 4 4 4 4 4 4 4 4 4 ...\n $ laps                   : num [1:630584] 69 69 69 69 69 69 69 69 69 69 ...\n $ fastestLapTime         : chr [1:630584] \"1:22.090\" \"1:22.090\" \"1:22.090\" \"1:22.090\" ...\n $ fastestLapSpeed        : chr [1:630584] \"192.125\" \"192.125\" \"192.125\" \"192.125\" ...\n $ constructor            : chr [1:630584] \"McLaren\" \"McLaren\" \"McLaren\" \"McLaren\" ...\n $ constructor_nationality: chr [1:630584] \"British\" \"British\" \"British\" \"British\" ...\n $ forename               : chr [1:630584] \"Fernando\" \"Fernando\" \"Fernando\" \"Fernando\" ...\n $ surname                : chr [1:630584] \"Alonso\" \"Alonso\" \"Alonso\" \"Alonso\" ...\n $ driver_nationality     : chr [1:630584] \"Spanish\" \"Spanish\" \"Spanish\" \"Spanish\" ...\n $ status                 : chr [1:630584] \"+1 Lap\" \"+1 Lap\" \"+1 Lap\" \"+1 Lap\" ...\n $ lap_number             : num [1:630584] 68 15 55 44 27 38 4 33 67 36 ...\n $ time                   : num [1:630584] 4920 5040 5100 5100 4980 4980 5160 5040 5100 4980 ...\n $ pitlap_number          : num [1:630584] 39 39 39 39 39 39 39 39 39 39 ...\n $ pitnumber              : num [1:630584] 1 1 1 1 1 1 1 1 1 1 ...\n $ pit_time               : num [1:630584] 58107 58107 58107 58107 58107 ...\n $ duration               : chr [1:630584] \"21.795\" \"21.795\" \"21.795\" \"21.795\" ...\n $ quali_position         : num [1:630584] 11 11 11 11 11 11 11 11 11 11 ...\n $ q1                     : chr [1:630584] \"1:18.208\" \"1:18.208\" \"1:18.208\" \"1:18.208\" ...\n $ q2                     : chr [1:630584] \"1:35.214\" \"1:35.214\" \"1:35.214\" \"1:35.214\" ...\n $ q3                     : chr [1:630584] \"\\\\N\" \"\\\\N\" \"\\\\N\" \"\\\\N\" ...\n - attr(*, \"spec\")=List of 3\n  ..$ cols   :List of 30\n  .. ..$ constructorId          : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ raceId                 : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ driverId               : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ statusId               : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ circuitId              : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ race_name              : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ year                   : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ circuit                : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ country                : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ alt                    : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ points                 : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ laps                   : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ fastestLapTime         : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ fastestLapSpeed        : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ constructor            : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ constructor_nationality: list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ forename               : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ surname                : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ driver_nationality     : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ status                 : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ lap_number             : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ time                   : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ pitlap_number          : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ pitnumber              : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ pit_time               : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ duration               : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ quali_position         : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\"\n  .. ..$ q1                     : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ q2                     : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  .. ..$ q3                     : list()\n  .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\"\n  ..$ default: list()\n  .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\"\n  ..$ delim  : chr \",\"\n  ..- attr(*, \"class\")= chr \"col_spec\"\n - attr(*, \"problems\")=&lt;externalptr&gt;",
    "crumbs": [
      "Base R Descriptive Statistics",
      "Picturing the Data"
    ]
  },
  {
    "objectID": "tidyscatter.html",
    "href": "tidyscatter.html",
    "title": "Scatter Plot",
    "section": "",
    "text": "The first plot style we will be looking at is a scatter plot. To plot a scatter plot in ggplot you will use the format discussed above and to tell r you want it to graph a scatter plot you will use the geom function; geom_point().\nIn the following example, we will plot the qualifying position for the 20 drivers and the final points they were awarded for the Las Vegas Grand Prix in 2023.\n\nscatterplot &lt;- race_stats |&gt;\n  filter(circuit == \"Las Vegas Strip Street Circuit\" & year == \"2023\")\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point()\n\n\n\n\n\n\n\n\nLet’s add a main title and adjust the x and y labels.\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point() +\n        labs(\n          x = \"Qualifying Position\",\n          y = \"Points Awarded\",\n          title = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\"\n        )\n\n\n\n\n\n\n\n\nIf we wanted to add a smoother line we would use the geom_smooth() and we will be fitting a linear regression line, thus inside geom_smooth() we method = \"lm\".\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point() +\n        labs(\n          x = \"Qualifying Position\",\n          y = \"Points Awarded\",\n          title = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\"\n        ) +\n        geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "tidyscatter.html#scatter-plots",
    "href": "tidyscatter.html#scatter-plots",
    "title": "Scatter Plot",
    "section": "",
    "text": "The first plot style we will be looking at is a scatter plot. To plot a scatter plot in ggplot you will use the format discussed above and to tell r you want it to graph a scatter plot you will use the geom function; geom_point().\nIn the following example, we will plot the qualifying position for the 20 drivers and the final points they were awarded for the Las Vegas Grand Prix in 2023.\n\nscatterplot &lt;- race_stats |&gt;\n  filter(circuit == \"Las Vegas Strip Street Circuit\" & year == \"2023\")\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point()\n\n\n\n\n\n\n\n\nLet’s add a main title and adjust the x and y labels.\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point() +\n        labs(\n          x = \"Qualifying Position\",\n          y = \"Points Awarded\",\n          title = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\"\n        )\n\n\n\n\n\n\n\n\nIf we wanted to add a smoother line we would use the geom_smooth() and we will be fitting a linear regression line, thus inside geom_smooth() we method = \"lm\".\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point() +\n        labs(\n          x = \"Qualifying Position\",\n          y = \"Points Awarded\",\n          title = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\"\n        ) +\n        geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Scatter Plot"
    ]
  },
  {
    "objectID": "tidyviz.html",
    "href": "tidyviz.html",
    "title": "Tidyverse Data Visualization",
    "section": "",
    "text": "ggplot2 is a package in r that is used for creating graphics. This package is found in the package tidyverse. To build a graph, you first need to tell r what information or data you want it to use in the function ggplot().\nggplot(data)\nNext, you need to tell it what aesthetics you want it to use, which includes what x and y variables.\nggplot(data, aes(x, y)\nAfter, you need to tell r how you want it to graph the data.\nggplot(data, aes(x, y) + geom_point()\nggplot has several different geom_ that allow you to graph various different things. We will focus on four different graphs: scatter plots, histograms, box plots, and time series.\nHowever, we will only scratch the surface of the ggplot2 package, which includes many more commands and options (aesthetics, geoms, scales, statistics, etc.).",
    "crumbs": [
      "Tidyverse Data Visualization"
    ]
  },
  {
    "objectID": "tidyviz.html#scatter-plots",
    "href": "tidyviz.html#scatter-plots",
    "title": "Tidyverse Data Visualization",
    "section": "Scatter Plots",
    "text": "Scatter Plots\nThe first plot style we will be looking at is a scatter plot. To plot a scatter plot in ggplot you will use the format discussed above and to tell r you want it to graph a scatter plot you will use the geom function; geom_point().\nIn the following example, we will plot the qualifying position for the 20 drivers and the final points they were awarded for the Las Vegas Grand Prix in 2023.\n\nscatterplot &lt;- race_stats |&gt;\n  filter(circuit == \"Las Vegas Strip Street Circuit\" & year == \"2023\")\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point()\n\n\n\n\n\n\n\n\nLet’s add a main title and adjust the x and y labels.\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point() +\n        labs(\n          x = \"Qualifying Position\",\n          y = \"Points Awarded\",\n          title = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\"\n        )\n\n\n\n\n\n\n\n\nIf we wanted to add a smoother line we would use the geom_smooth() and we will be fitting a linear regression line, thus inside geom_smooth() we method = \"lm\".\n\nggplot(scatterplot, aes(quali_position, points)) + \n        geom_point() +\n        labs(\n          x = \"Qualifying Position\",\n          y = \"Points Awarded\",\n          title = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\"\n        ) +\n        geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Tidyverse Data Visualization"
    ]
  },
  {
    "objectID": "tidyviz.html#histograms",
    "href": "tidyviz.html#histograms",
    "title": "Tidyverse Data Visualization",
    "section": "Histograms",
    "text": "Histograms\nIn ggplot2 to build a histogram we put geom_histogram() and we only one numeric variable is needed in the input. In the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) |&gt; mutate(final_position_numeric = as.numeric(final_position))\n\nMcLarenStandings_2023 &lt;- McLarenStandings_2023 |&gt;\n  mutate(final_position_numeric = ifelse(final_position == \"DNF\", 0, as.numeric(final_position)))\n\nggplot(McLarenStandings_2023, aes(x = final_position_numeric)) +\n  ## we use fill for bars not color and we can adjust bins here\n  geom_histogram(fill = \"orange\", bins = 10) +\n  labs(\n        title = \"McLaren Race Results 2023\", \n        x = \"Race Results\", \n        y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = final_position_numeric): Defines the variable for the histogram.\ngeom_histogram(): Creates the histogram.\nfill = \"orange\": Fills the bars with orange.\nbins = 10: Adjust the number of bins (change as needed).\nlabs(): Adds title and axis labels.\ntheme_minimal(): Uses a cleaner theme.\n\nIn a histogram, bins represent the intervals (or ranges) into which data points are grouped. Each bin covers a specific range of values, and the height of the bar represents the number of observations (or frequency) that fall within that range.",
    "crumbs": [
      "Tidyverse Data Visualization"
    ]
  },
  {
    "objectID": "tidyviz.html#bar-plot",
    "href": "tidyviz.html#bar-plot",
    "title": "Tidyverse Data Visualization",
    "section": "Bar Plot",
    "text": "Bar Plot\nNow, lets say we wanted to compare this across different categories, therefore instead we can use bar plots instead of histograms.\n\n# Summarize mean race positions by driver\nbarplot &lt;- McLarenStandings_2023 |&gt;\n  group_by(surname) |&gt;\n  summarize(mean_position = mean(final_position_numeric))\n\n# Create a bar plot of mean race positions\nggplot(barplot, aes(x = mean_position, y = surname, fill = surname)) +\n  geom_col() +\n  labs(title = \"McLaren Mean Race Results 2023\", \n       x = \"Mean Race Position\", \n       y = \"McLaren Driver\") +\n  scale_fill_manual(values = c(\"orange\", \"grey\")) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = mean_position, y = surname, fill = surname):\n\nx = mean_position: The x-axis represents the mean race position of each driver.\ny = surname: The y-axis represents the driver’s name.\nfill = surname: Each driver gets a unique color for their bar.\n\ngeom_col():\n\nCreates a bar chart where the bar length represents the mean race position\n\nscale_fill_manual(values = c(\"orange\", \"grey\")):\n\nManually assigns colors to the bars.\n\"orange\" for one driver and \"grey\" for the other (representing McLaren’s team colors).",
    "crumbs": [
      "Tidyverse Data Visualization"
    ]
  },
  {
    "objectID": "tidyviz.html#box-plot",
    "href": "tidyviz.html#box-plot",
    "title": "Tidyverse Data Visualization",
    "section": "Box plot",
    "text": "Box plot\nTo make a box plot we use the geom_boxplot() function!\n\nggplot(McLarenStandings_2023, aes(x = surname, y = final_position_numeric, fill = surname)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"orange\", \"grey\")) +  # Assign McLaren colors\n  labs(title = \"McLaren Race Results\", \n       x = \"Driver\", \n       y = \"Final Position\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = surname, y = final_position_numeric, fill = surname):\n\nx = surname: Drivers on the x-axis.\ny = final_position_numeric: Final race position on the y-axis.\nfill = surname: Colors the boxes based on the driver.\n\ngeom_boxplot(): Creates a boxplot to show the distribution of race positions.\n\nThe box and whiskey plot represents the middle 50% of race finishes for each driver, while the horizontal line inside the box is the median race position, the whiskers show the range of most race finishes (excluding outliers), and any dots outside the whiskers indicate outliers.",
    "crumbs": [
      "Tidyverse Data Visualization"
    ]
  },
  {
    "objectID": "tidyviz.html#time-series",
    "href": "tidyviz.html#time-series",
    "title": "Tidyverse Data Visualization",
    "section": "Time Series",
    "text": "Time Series\ngeom_line() in ggplot2 is used to create a line plot by connecting data points with a continuous line, which is ideal for visualizing trends over time. It is particularly useful for time series data because it clearly shows how a variable changes across ordered time intervals, allowing for easy identification of patterns and trends.\n\n?constructors_stats\n\n# Calculate total wins per year for Ferrari\nferrari_wins &lt;- constructors_stats |&gt;\n  filter(constructor == \"Ferrari\") |&gt;\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(constructor_wins)))\n\nggplot(ferrari_wins, aes(x = year, y = total_wins)) +\n  geom_line(color = \"red\", linewidth = 1.2) +  # Creates a red line plot\n  labs(title = \"Ferrari Wins 1958 to 2024 (Before the Summer Break)\", \n       x = \"Year\", \n       y = \"Wins\") +\n  theme_classic()\n\n\n\n\n\n\n\n\n\naes(x = year, y = total_wins):\n\nx = year: Puts the years on the x-axis.\ny = total_wins: Puts the total number of wins on the y-axis.\n\ngeom_line(color = \"red\", linewidth = 1.2):\n\ngeom_line(): Creates a line plot instead of points.\ncolor = \"red\": Adds a color to the line\nlinewidth = 1.2: Makes the line slightly thicker for better visibility.",
    "crumbs": [
      "Tidyverse Data Visualization"
    ]
  },
  {
    "objectID": "advcode.html",
    "href": "advcode.html",
    "title": "More Adv. Code",
    "section": "",
    "text": "Now that you know the basics, we can add more details and change things.\nI have provided some examples. In the first example, I add three different box plots with different colors and I adjust opacity of the colors.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n## BOX PLOT ##\n\n# Wrangle the Data\nthebigthree &lt;- constructors_stats |&gt;\n  # Filter for the top 3 constructors since 2016 \n  filter((constructor == \"Mercedes\" | constructor == \"Red Bull\" | constructor == \"Ferrari\") &            year &gt; 2016)  |&gt;\n  # calculate total wins per year per constructor\n  group_by(constructor, year) |&gt; \n  summarize(total_wins = sum(constructor_wins))\n\n`summarise()` has grouped output by 'constructor'. You can override using the\n`.groups` argument.\n\n# Create boxplot\nboxplot(total_wins ~ constructor, \n        data = thebigthree,\n        main = \"The Big Three Constructor Wins Since 2016\",\n        xlab = \"Constructor\",\n        ylab = \"Wins\",\n        col = c(adjustcolor(\"red\", alpha.f = 0.4), # alpha.f adjusts the opacity\n                adjustcolor(\"grey\", alpha.f = 0.4),\n                adjustcolor(\"blue\", alpha.f = 0.4)))\n\n\n\n\n\n\n\n\nIn my second example, I add two more lines to my time series graph, change their colors, and also add a legend.\n\n## TIME SERIES ##\n\n# Wrangle the Data\n\n# Avg wins for all drivers since 2006\navg_wins &lt;- driver_stats |&gt;\n    filter(year &gt; 2006) |&gt;\n    group_by(surname, year) |&gt; \n    summarize(\n      max_wins = max(driver_wins)) |&gt;\n    ungroup() |&gt;\n    group_by(year) |&gt;\n  summarize(\n      total_wins = mean(max_wins))\n\n`summarise()` has grouped output by 'surname'. You can override using the\n`.groups` argument.\n\n# Avg wins for Lewis Hamilton since joining the grid in 2007\nhamilton &lt;- driver_stats |&gt;\n  # Filter for the Lewis Hamilton\n  filter(surname == \"Hamilton\")  |&gt;\n  # calculate total wins per year for Hamilton\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(driver_wins)))\n\n# Avg wins for Max Verstappen since joining the grid in 2015\nverstappen &lt;- driver_stats |&gt;\n  # Filter for Max Verstappen\n  filter(surname== \"Verstappen\")  |&gt;\n  # calculate total wins per year for Verstappen\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(driver_wins)))\n\n# Create Time Series Plot\nplot(avg_wins$year, avg_wins$total_wins, type = \"l\",\n     col = \"grey\",\n     main = \"Total Wins Over Time\",\n     xlab = \"Year\",\n     ylab = \"Total Wins\",\n     ylim = range(c(avg_wins$total_wins,\n                    hamilton$total_wins,\n                    verstappen$total_wins\n     )))\n    \n\n# Add lines for Hamilton and Verstappen\nlines(hamilton$year, hamilton$total_wins, col = \"turquoise\", type = \"l\")\nlines(verstappen$year, verstappen$total_wins, col = \"red\", type = \"l\")\n\n# Add a legend to the plot\nlegend(\"topleft\", legend = c(\"Avg.\", \"Hamilton\", \"Verstappen\"),\n       col = c(\"grey\", \"turquoise\", \"red\"), lty = 1, cex = 0.8)",
    "crumbs": [
      "Base R Data Visualization",
      "More Adv. Code"
    ]
  },
  {
    "objectID": "advcode.html#more-adv.-code-for-base-r-visualization",
    "href": "advcode.html#more-adv.-code-for-base-r-visualization",
    "title": "More Adv. Code",
    "section": "",
    "text": "Now that you know the basics, we can add more details and change things.\nI have provided some examples. In the first example, I add three different box plots with different colors and I adjust opacity of the colors.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n## BOX PLOT ##\n\n# Wrangle the Data\nthebigthree &lt;- constructors_stats |&gt;\n  # Filter for the top 3 constructors since 2016 \n  filter((constructor == \"Mercedes\" | constructor == \"Red Bull\" | constructor == \"Ferrari\") &            year &gt; 2016)  |&gt;\n  # calculate total wins per year per constructor\n  group_by(constructor, year) |&gt; \n  summarize(total_wins = sum(constructor_wins))\n\n`summarise()` has grouped output by 'constructor'. You can override using the\n`.groups` argument.\n\n# Create boxplot\nboxplot(total_wins ~ constructor, \n        data = thebigthree,\n        main = \"The Big Three Constructor Wins Since 2016\",\n        xlab = \"Constructor\",\n        ylab = \"Wins\",\n        col = c(adjustcolor(\"red\", alpha.f = 0.4), # alpha.f adjusts the opacity\n                adjustcolor(\"grey\", alpha.f = 0.4),\n                adjustcolor(\"blue\", alpha.f = 0.4)))\n\n\n\n\n\n\n\n\nIn my second example, I add two more lines to my time series graph, change their colors, and also add a legend.\n\n## TIME SERIES ##\n\n# Wrangle the Data\n\n# Avg wins for all drivers since 2006\navg_wins &lt;- driver_stats |&gt;\n    filter(year &gt; 2006) |&gt;\n    group_by(surname, year) |&gt; \n    summarize(\n      max_wins = max(driver_wins)) |&gt;\n    ungroup() |&gt;\n    group_by(year) |&gt;\n  summarize(\n      total_wins = mean(max_wins))\n\n`summarise()` has grouped output by 'surname'. You can override using the\n`.groups` argument.\n\n# Avg wins for Lewis Hamilton since joining the grid in 2007\nhamilton &lt;- driver_stats |&gt;\n  # Filter for the Lewis Hamilton\n  filter(surname == \"Hamilton\")  |&gt;\n  # calculate total wins per year for Hamilton\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(driver_wins)))\n\n# Avg wins for Max Verstappen since joining the grid in 2015\nverstappen &lt;- driver_stats |&gt;\n  # Filter for Max Verstappen\n  filter(surname== \"Verstappen\")  |&gt;\n  # calculate total wins per year for Verstappen\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(driver_wins)))\n\n# Create Time Series Plot\nplot(avg_wins$year, avg_wins$total_wins, type = \"l\",\n     col = \"grey\",\n     main = \"Total Wins Over Time\",\n     xlab = \"Year\",\n     ylab = \"Total Wins\",\n     ylim = range(c(avg_wins$total_wins,\n                    hamilton$total_wins,\n                    verstappen$total_wins\n     )))\n    \n\n# Add lines for Hamilton and Verstappen\nlines(hamilton$year, hamilton$total_wins, col = \"turquoise\", type = \"l\")\nlines(verstappen$year, verstappen$total_wins, col = \"red\", type = \"l\")\n\n# Add a legend to the plot\nlegend(\"topleft\", legend = c(\"Avg.\", \"Hamilton\", \"Verstappen\"),\n       col = c(\"grey\", \"turquoise\", \"red\"), lty = 1, cex = 0.8)",
    "crumbs": [
      "Base R Data Visualization",
      "More Adv. Code"
    ]
  },
  {
    "objectID": "tidystats.html",
    "href": "tidystats.html",
    "title": "Tiderverse Descriptive Statistics and Data Wrangling",
    "section": "",
    "text": "In the following coding examples, you will see three important functions, a pipe, select(), and filter(). First, a pipe is written as a %&gt;% or |&gt;. Pipes are a powerful tool that help us clearly expressing a sequence of functions. Pipes tell R that you want to use a designated set for a chain of functions that build off of each other. A way to think about is in math terms.\n$$\n\\[ F(G(H(X))), X=Data\\]\n$$\nIn this series of functions, the first step is you solve \\(H(X)\\), then using that solution you solve \\(G()\\), then after you solve \\(F()\\). The final output is the solution of those chain of events with the information of \\(X\\). This is how pipes work! Pipes use a set of information, typically a data frame, and then apply it to a series of functions that build off each other.\n\nIn the following example, I use the select() and filter() to simplify the data. The select() allows me to select certain variables from the data and eliminate the rest. filter() does something similar but instead of variables, it allows me to simplify the data based on values based on a set of programmed logical operators. In my first example, I select for the circuit, year, constructor, surname of the driver, and the number of points awarded during that race. I use the unique() to remove duplicates, and then I filter for the race information for the constructor McLaren during the 2023 season.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n\nrace_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023)\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname points\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;\n 1 Bahrain International Circuit   2023 McLaren     Norris       0\n 2 Jeddah Corniche Circuit         2023 McLaren     Norris       0\n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri      0\n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris       8\n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri      4\n 6 Baku City Circuit               2023 McLaren     Norris       2\n 7 Baku City Circuit               2023 McLaren     Piastri      0\n 8 Miami International Autodrome   2023 McLaren     Norris       0\n 9 Miami International Autodrome   2023 McLaren     Piastri      0\n10 Circuit de Monaco               2023 McLaren     Norris       2\n# ℹ 30 more rows\n\n\nWhat if we wanted two different constructors? Then we want to use the logical operator for | and also differentiate it from the next instruction for filter by using a , or (). In the example bellow, I filter for the race information for the constructor Mercades and Red Bull during the 2021 season.\n\nrace_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n    unique() |&gt;\n    filter(constructor == \"Mercades\" |  constructor == \"Red Bull\", year == 2021) |&gt;\n    print()\n\n# A tibble: 40 × 5\n   circuit                             year constructor surname    points\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Losail International Circuit        2021 Red Bull    Pérez          12\n 2 Losail International Circuit        2021 Red Bull    Verstappen     19\n 3 Bahrain International Circuit       2021 Red Bull    Pérez          10\n 4 Bahrain International Circuit       2021 Red Bull    Verstappen     18\n 5 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Pérez           0\n 6 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Verstappen     25\n 7 Autódromo Internacional do Algarve  2021 Red Bull    Pérez          12\n 8 Autódromo Internacional do Algarve  2021 Red Bull    Verstappen     18\n 9 Circuit de Barcelona-Catalunya      2021 Red Bull    Pérez          10\n10 Circuit de Barcelona-Catalunya      2021 Red Bull    Verstappen     19\n# ℹ 30 more rows\n\n\nHowever, if we wanted to use the modified data, we could not because it is not saved. If we want to use this data we need to save it as a new object!\n\nseason_2021 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n    unique() |&gt;\n    filter(constructor == \"Mercades\" |  constructor == \"Red Bull\", year == 2021) |&gt;\n    print()\n\n# A tibble: 40 × 5\n   circuit                             year constructor surname    points\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Losail International Circuit        2021 Red Bull    Pérez          12\n 2 Losail International Circuit        2021 Red Bull    Verstappen     19\n 3 Bahrain International Circuit       2021 Red Bull    Pérez          10\n 4 Bahrain International Circuit       2021 Red Bull    Verstappen     18\n 5 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Pérez           0\n 6 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Verstappen     25\n 7 Autódromo Internacional do Algarve  2021 Red Bull    Pérez          12\n 8 Autódromo Internacional do Algarve  2021 Red Bull    Verstappen     18\n 9 Circuit de Barcelona-Catalunya      2021 Red Bull    Pérez          10\n10 Circuit de Barcelona-Catalunya      2021 Red Bull    Verstappen     19\n# ℹ 30 more rows\n\n\nNow, we can use this information!",
    "crumbs": [
      "Tidyverse Descriptive Statistics"
    ]
  },
  {
    "objectID": "tidystats.html#filtering-and-selecting-data",
    "href": "tidystats.html#filtering-and-selecting-data",
    "title": "Tiderverse Descriptive Statistics and Data Wrangling",
    "section": "",
    "text": "In the following coding examples, you will see three important functions, a pipe, select(), and filter(). First, a pipe is written as a %&gt;% or |&gt;. Pipes are a powerful tool that help us clearly expressing a sequence of functions. Pipes tell R that you want to use a designated set for a chain of functions that build off of each other. A way to think about is in math terms.\n$$\n\\[ F(G(H(X))), X=Data\\]\n$$\nIn this series of functions, the first step is you solve \\(H(X)\\), then using that solution you solve \\(G()\\), then after you solve \\(F()\\). The final output is the solution of those chain of events with the information of \\(X\\). This is how pipes work! Pipes use a set of information, typically a data frame, and then apply it to a series of functions that build off each other.\n\nIn the following example, I use the select() and filter() to simplify the data. The select() allows me to select certain variables from the data and eliminate the rest. filter() does something similar but instead of variables, it allows me to simplify the data based on values based on a set of programmed logical operators. In my first example, I select for the circuit, year, constructor, surname of the driver, and the number of points awarded during that race. I use the unique() to remove duplicates, and then I filter for the race information for the constructor McLaren during the 2023 season.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\n\nrace_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023)\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname points\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;    &lt;dbl&gt;\n 1 Bahrain International Circuit   2023 McLaren     Norris       0\n 2 Jeddah Corniche Circuit         2023 McLaren     Norris       0\n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri      0\n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris       8\n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri      4\n 6 Baku City Circuit               2023 McLaren     Norris       2\n 7 Baku City Circuit               2023 McLaren     Piastri      0\n 8 Miami International Autodrome   2023 McLaren     Norris       0\n 9 Miami International Autodrome   2023 McLaren     Piastri      0\n10 Circuit de Monaco               2023 McLaren     Norris       2\n# ℹ 30 more rows\n\n\nWhat if we wanted two different constructors? Then we want to use the logical operator for | and also differentiate it from the next instruction for filter by using a , or (). In the example bellow, I filter for the race information for the constructor Mercades and Red Bull during the 2021 season.\n\nrace_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n    unique() |&gt;\n    filter(constructor == \"Mercades\" |  constructor == \"Red Bull\", year == 2021) |&gt;\n    print()\n\n# A tibble: 40 × 5\n   circuit                             year constructor surname    points\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Losail International Circuit        2021 Red Bull    Pérez          12\n 2 Losail International Circuit        2021 Red Bull    Verstappen     19\n 3 Bahrain International Circuit       2021 Red Bull    Pérez          10\n 4 Bahrain International Circuit       2021 Red Bull    Verstappen     18\n 5 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Pérez           0\n 6 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Verstappen     25\n 7 Autódromo Internacional do Algarve  2021 Red Bull    Pérez          12\n 8 Autódromo Internacional do Algarve  2021 Red Bull    Verstappen     18\n 9 Circuit de Barcelona-Catalunya      2021 Red Bull    Pérez          10\n10 Circuit de Barcelona-Catalunya      2021 Red Bull    Verstappen     19\n# ℹ 30 more rows\n\n\nHowever, if we wanted to use the modified data, we could not because it is not saved. If we want to use this data we need to save it as a new object!\n\nseason_2021 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n    unique() |&gt;\n    filter(constructor == \"Mercades\" |  constructor == \"Red Bull\", year == 2021) |&gt;\n    print()\n\n# A tibble: 40 × 5\n   circuit                             year constructor surname    points\n   &lt;chr&gt;                              &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;       &lt;dbl&gt;\n 1 Losail International Circuit        2021 Red Bull    Pérez          12\n 2 Losail International Circuit        2021 Red Bull    Verstappen     19\n 3 Bahrain International Circuit       2021 Red Bull    Pérez          10\n 4 Bahrain International Circuit       2021 Red Bull    Verstappen     18\n 5 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Pérez           0\n 6 Autodromo Enzo e Dino Ferrari       2021 Red Bull    Verstappen     25\n 7 Autódromo Internacional do Algarve  2021 Red Bull    Pérez          12\n 8 Autódromo Internacional do Algarve  2021 Red Bull    Verstappen     18\n 9 Circuit de Barcelona-Catalunya      2021 Red Bull    Pérez          10\n10 Circuit de Barcelona-Catalunya      2021 Red Bull    Verstappen     19\n# ℹ 30 more rows\n\n\nNow, we can use this information!",
    "crumbs": [
      "Tidyverse Descriptive Statistics"
    ]
  },
  {
    "objectID": "tidystats.html#creating-new-variables",
    "href": "tidystats.html#creating-new-variables",
    "title": "Tiderverse Descriptive Statistics and Data Wrangling",
    "section": "Creating New Variables",
    "text": "Creating New Variables\nWe can also add to our data sets! If we want to make a new variable, we can use the mutate(), which uses existing data to create new variables. The correct format of the function is the following, first is the new variable name and then an equal sign =, followed by how the new variable will be formed and what existing variables are used to make it.\nmutate(new_column_name = function(old_variable_1))\nIn the example below, we calculate the average lap time by taking the total time for the driver to finish the race divided by the number of laps.\n\nseason_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, time, laps) |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(avg_laptime = sum(time)/laps)\n\nseason_2023 |&gt; \n   select(circuit, year, constructor, surname, avg_laptime) |&gt;\n   # remove duplicates\n   unique() |&gt;\n   print()\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname avg_laptime\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;         &lt;dbl&gt;\n 1 Bahrain International Circuit   2023 McLaren     Norris      646286.\n 2 Jeddah Corniche Circuit         2023 McLaren     Norris      710915.\n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri     710915.\n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris      612858.\n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri     612858.\n 6 Baku City Circuit               2023 McLaren     Norris      696975.\n 7 Baku City Circuit               2023 McLaren     Piastri     696975.\n 8 Miami International Autodrome   2023 McLaren     Norris      623609.\n 9 Miami International Autodrome   2023 McLaren     Piastri     634745.\n10 Circuit de Monaco               2023 McLaren     Norris      461633.\n# ℹ 30 more rows\n\n\nIf we wanted to make a new character variable we would use the case_when() in the mutate() function. In this example, I make a new variable based on the final position of the race for the two McLaren drivers, Piastri and Norris, in the 2023 season. I use the existing variables the circuit and surname to make this new variable.\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) \n\nprint(McLarenStandings_2023)\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname final_position\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;         \n 1 Bahrain International Circuit   2023 McLaren     Norris  17            \n 2 Jeddah Corniche Circuit         2023 McLaren     Norris  17            \n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri 15            \n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris  6             \n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri 8             \n 6 Baku City Circuit               2023 McLaren     Norris  9             \n 7 Baku City Circuit               2023 McLaren     Piastri 11            \n 8 Miami International Autodrome   2023 McLaren     Norris  17            \n 9 Miami International Autodrome   2023 McLaren     Piastri 19            \n10 Circuit de Monaco               2023 McLaren     Norris  9             \n# ℹ 30 more rows",
    "crumbs": [
      "Tidyverse Descriptive Statistics"
    ]
  },
  {
    "objectID": "tidystats.html#descriptive-statistics-using-tidyverse",
    "href": "tidystats.html#descriptive-statistics-using-tidyverse",
    "title": "Tiderverse Descriptive Statistics and Data Wrangling",
    "section": "Descriptive Statistics Using Tidyverse",
    "text": "Descriptive Statistics Using Tidyverse\nNow that we know some basic ways to manipulate the data frame, lets look at different way to do basic descriptive statistics! In this section we will be using the function, summarize(). This function is similar to the mutate function, except instead of adding a variable, it makes a new data frame based on existing variables. You will also see the function group_by(). This function allows us to organize the data by telling it to group things by a variable(s). Essentially, the functions splits things into groups.\nFor this example we are going to find the total points for each team in the 2023 season!\n\nTeamStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(year==2023) |&gt;\n  group_by(constructor) |&gt;\n  summarize(\n    total_points = sum(points)\n  )\n\nprint(TeamStandings_2023)\n\n# A tibble: 10 × 2\n   constructor    total_points\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Alfa Romeo               16\n 2 AlphaTauri               22\n 3 Alpine F1 Team          110\n 4 Aston Martin            266\n 5 Ferrari                 363\n 6 Haas F1 Team              9\n 7 McLaren                 266\n 8 Mercedes                374\n 9 Red Bull                790\n10 Williams                 26\n\n\n\nTeamStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(year==2023) |&gt;\n  group_by(constructor) |&gt;\n  summarize(\n    total_points = sum(points)\n  ) |&gt;\n  arrange(desc(total_points))\n\nprint(TeamStandings_2023)\n\n# A tibble: 10 × 2\n   constructor    total_points\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 Red Bull                790\n 2 Mercedes                374\n 3 Ferrari                 363\n 4 Aston Martin            266\n 5 McLaren                 266\n 6 Alpine F1 Team          110\n 7 Williams                 26\n 8 AlphaTauri               22\n 9 Alfa Romeo               16\n10 Haas F1 Team              9\n\n\nWhat if we wanted to know the percentage of points each driver contributed to the teams total?\n\nTeamStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, points) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(year==2023) |&gt;\n  group_by(constructor) |&gt;\n  mutate(total_points = sum(points, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;  # Ungroup to avoid issues with the next group_by\n  group_by(surname) |&gt;\n  summarize(\n  perc_points = sum(points, na.rm = TRUE) / unique(total_points) * 100)  |&gt;\n  arrange(desc(perc_points))\n\nprint(TeamStandings_2023)\n\n# A tibble: 22 × 2\n   surname    perc_points\n   &lt;chr&gt;            &lt;dbl&gt;\n 1 Albon             96.2\n 2 Alonso            74.4\n 3 Norris            69.2\n 4 Verstappen        67.1\n 5 Hülkenberg        66.7\n 6 Tsunoda           63.6\n 7 Bottas            62.5\n 8 Hamilton          58.0\n 9 Leclerc           51.0\n10 Ocon              50.9\n# ℹ 12 more rows",
    "crumbs": [
      "Tidyverse Descriptive Statistics"
    ]
  },
  {
    "objectID": "tidyhist.html",
    "href": "tidyhist.html",
    "title": "Histograms",
    "section": "",
    "text": "In ggplot2 to build a histogram we put geom_histogram() and we only one numeric variable is needed in the input. In the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nMcLarenStandings_2023 &lt;- McLarenStandings_2023 |&gt;\n  mutate(final_position_numeric = ifelse(final_position == \"DNF\", 0, as.numeric(final_position)))\n\nggplot(McLarenStandings_2023, aes(x = final_position_numeric)) +\n  ## we use fill for bars not color and we can adjust bins here\n  geom_histogram(fill = \"orange\", bins = 10) +\n  labs(\n        title = \"McLaren Race Results 2023\", \n        x = \"Race Results\", \n        y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = final_position_numeric): Defines the variable for the histogram.\ngeom_histogram(): Creates the histogram.\nfill = \"orange\": Fills the bars with orange.\nbins = 10: Adjust the number of bins (change as needed).\nlabs(): Adds title and axis labels.\ntheme_minimal(): Uses a cleaner theme.\n\nIn a histogram, bins represent the intervals (or ranges) into which data points are grouped. Each bin covers a specific range of values, and the height of the bar represents the number of observations (or frequency) that fall within that range.",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Histograms"
    ]
  },
  {
    "objectID": "tidyhist.html#histograms",
    "href": "tidyhist.html#histograms",
    "title": "Histograms",
    "section": "",
    "text": "In ggplot2 to build a histogram we put geom_histogram() and we only one numeric variable is needed in the input. In the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nMcLarenStandings_2023 &lt;- McLarenStandings_2023 |&gt;\n  mutate(final_position_numeric = ifelse(final_position == \"DNF\", 0, as.numeric(final_position)))\n\nggplot(McLarenStandings_2023, aes(x = final_position_numeric)) +\n  ## we use fill for bars not color and we can adjust bins here\n  geom_histogram(fill = \"orange\", bins = 10) +\n  labs(\n        title = \"McLaren Race Results 2023\", \n        x = \"Race Results\", \n        y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = final_position_numeric): Defines the variable for the histogram.\ngeom_histogram(): Creates the histogram.\nfill = \"orange\": Fills the bars with orange.\nbins = 10: Adjust the number of bins (change as needed).\nlabs(): Adds title and axis labels.\ntheme_minimal(): Uses a cleaner theme.\n\nIn a histogram, bins represent the intervals (or ranges) into which data points are grouped. Each bin covers a specific range of values, and the height of the bar represents the number of observations (or frequency) that fall within that range.",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Histograms"
    ]
  },
  {
    "objectID": "newvar.html",
    "href": "newvar.html",
    "title": "Creating New Variables",
    "section": "",
    "text": "We can also add to our data sets! If we want to make a new variable, we can use the mutate(), which uses existing data to create new variables. The correct format of the function is the following, first is the new variable name and then an equal sign =, followed by how the new variable will be formed and what existing variables are used to make it.\nmutate(new_column_name = function(old_variable_1))\nIn the example below, we calculate the average lap time by taking the total time for the driver to finish the race divided by the number of laps.\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nseason_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname, time, laps) |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(avg_laptime = sum(time)/laps)\n\nseason_2023 |&gt; \n   select(circuit, year, constructor, surname, avg_laptime) |&gt;\n   # remove duplicates\n   unique() |&gt;\n   print()\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname avg_laptime\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;         &lt;dbl&gt;\n 1 Bahrain International Circuit   2023 McLaren     Norris      646286.\n 2 Jeddah Corniche Circuit         2023 McLaren     Norris      710915.\n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri     710915.\n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris      612858.\n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri     612858.\n 6 Baku City Circuit               2023 McLaren     Norris      696975.\n 7 Baku City Circuit               2023 McLaren     Piastri     696975.\n 8 Miami International Autodrome   2023 McLaren     Norris      623609.\n 9 Miami International Autodrome   2023 McLaren     Piastri     634745.\n10 Circuit de Monaco               2023 McLaren     Norris      461633.\n# ℹ 30 more rows\nIf we wanted to make a new character variable we would use the case_when() in the mutate() function. In this example, I make a new variable based on the final position of the race for the two McLaren drivers, Piastri and Norris, in the 2023 season. I use the existing variables the circuit and surname to make this new variable.\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) \n\nprint(McLarenStandings_2023)\n\n# A tibble: 40 × 5\n   circuit                         year constructor surname final_position\n   &lt;chr&gt;                          &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;         \n 1 Bahrain International Circuit   2023 McLaren     Norris  17            \n 2 Jeddah Corniche Circuit         2023 McLaren     Norris  17            \n 3 Jeddah Corniche Circuit         2023 McLaren     Piastri 15            \n 4 Albert Park Grand Prix Circuit  2023 McLaren     Norris  6             \n 5 Albert Park Grand Prix Circuit  2023 McLaren     Piastri 8             \n 6 Baku City Circuit               2023 McLaren     Norris  9             \n 7 Baku City Circuit               2023 McLaren     Piastri 11            \n 8 Miami International Autodrome   2023 McLaren     Norris  17            \n 9 Miami International Autodrome   2023 McLaren     Piastri 19            \n10 Circuit de Monaco               2023 McLaren     Norris  9             \n# ℹ 30 more rows",
    "crumbs": [
      "Tidyverse Descriptive Statistics",
      "Creating New Variables"
    ]
  },
  {
    "objectID": "text.html",
    "href": "text.html",
    "title": "Writing out Text vs. Numbers",
    "section": "",
    "text": "In R, to output text you will use single or double quotes:\n\n\"Hello World!\"\n\n[1] \"Hello World!\"\n\n'Hello World!' \n\n[1] \"Hello World!\"\n\n\nTo output numbers you just type out the number. Also, note that I do not use a comma when writing out my four-digit number:\n\n5\n\n[1] 5\n\n75\n\n[1] 75\n\n1000\n\n[1] 1000",
    "crumbs": [
      "Base R Syntax",
      "Writing out Text vs. Numbers"
    ]
  },
  {
    "objectID": "tidybox.html",
    "href": "tidybox.html",
    "title": "Box Plots",
    "section": "",
    "text": "To make a box plot we use the geom_boxplot() function! In the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\n#| include: false\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) |&gt; mutate(final_position_numeric = as.numeric(final_position))\n\n\nggplot(McLarenStandings_2023, aes(x = surname, y = final_position_numeric, fill = surname)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"orange\", \"grey\")) +  # Assign McLaren colors\n  labs(title = \"McLaren Race Results\", \n       x = \"Driver\", \n       y = \"Final Position\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = surname, y = final_position_numeric, fill = surname):\n\nx = surname: Drivers on the x-axis.\ny = final_position_numeric: Final race position on the y-axis.\nfill = surname: Colors the boxes based on the driver.\n\ngeom_boxplot(): Creates a boxplot to show the distribution of race positions.\n\nThe box and whiskey plot represents the middle 50% of race finishes for each driver, while the horizontal line inside the box is the median race position, the whiskers show the range of most race finishes (excluding outliers), and any dots outside the whiskers indicate outliers.",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Box Plots"
    ]
  },
  {
    "objectID": "tidybar.html",
    "href": "tidybar.html",
    "title": "Bar Plots",
    "section": "",
    "text": "Now, lets say we wanted to compare this across different categories, therefore instead we can use bar plots instead of histograms. In the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) |&gt; mutate(final_position_numeric = as.numeric(final_position))\n\n# Summarize mean race positions by driver\nbarplot &lt;- McLarenStandings_2023 |&gt;\n  group_by(surname) |&gt;\n  summarize(mean_position = mean(final_position_numeric))\n\n# Create a bar plot of mean race positions\nggplot(barplot, aes(x = mean_position, y = surname, fill = surname)) +\n  geom_col() +\n  labs(title = \"McLaren Mean Race Results 2023\", \n       x = \"Mean Race Position\", \n       y = \"McLaren Driver\") +\n  scale_fill_manual(values = c(\"orange\", \"grey\")) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = mean_position, y = surname, fill = surname):\n\nx = mean_position: The x-axis represents the mean race position of each driver.\ny = surname: The y-axis represents the driver’s name.\nfill = surname: Each driver gets a unique color for their bar.\n\ngeom_col():\n\nCreates a bar chart where the bar length represents the mean race position\n\nscale_fill_manual(values = c(\"orange\", \"grey\")):\n\nManually assigns colors to the bars.\n\"orange\" for one driver and \"grey\" for the other (representing McLaren’s team colors).",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Bar Plots"
    ]
  },
  {
    "objectID": "tidybar.html#bar-plot",
    "href": "tidybar.html#bar-plot",
    "title": "Bar Plots",
    "section": "",
    "text": "Now, lets say we wanted to compare this across different categories, therefore instead we can use bar plots instead of histograms. In the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) |&gt; mutate(final_position_numeric = as.numeric(final_position))\n\n# Summarize mean race positions by driver\nbarplot &lt;- McLarenStandings_2023 |&gt;\n  group_by(surname) |&gt;\n  summarize(mean_position = mean(final_position_numeric))\n\n# Create a bar plot of mean race positions\nggplot(barplot, aes(x = mean_position, y = surname, fill = surname)) +\n  geom_col() +\n  labs(title = \"McLaren Mean Race Results 2023\", \n       x = \"Mean Race Position\", \n       y = \"McLaren Driver\") +\n  scale_fill_manual(values = c(\"orange\", \"grey\")) + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\naes(x = mean_position, y = surname, fill = surname):\n\nx = mean_position: The x-axis represents the mean race position of each driver.\ny = surname: The y-axis represents the driver’s name.\nfill = surname: Each driver gets a unique color for their bar.\n\ngeom_col():\n\nCreates a bar chart where the bar length represents the mean race position\n\nscale_fill_manual(values = c(\"orange\", \"grey\")):\n\nManually assigns colors to the bars.\n\"orange\" for one driver and \"grey\" for the other (representing McLaren’s team colors).",
    "crumbs": [
      "Tidyverse Data Visualization",
      "Bar Plots"
    ]
  },
  {
    "objectID": "wd.html",
    "href": "wd.html",
    "title": "Setting up a Working Directory",
    "section": "",
    "text": "It is important to keep all the files associated with a given project, such as data, scripts, analytical results, and figures, together. To do this we need to make a working directory.\n\nTo create a new working directory in RStudio:\n\nUse File → New Project or use the New Project button (available on the Projects toolbar in the top right corner or on the global toolbar at the top left corner).\nThis will open the “New Project Wizard” popup.\nClick “New Directory”.\n\n\n\nTo set the working directory, there are two possible ways, using code or using RStudio directly:\n\nOption 1: Using R Code\n\n# Set working directory (replace this with your own)\nsetwd(\"/Users/yourname/Desktop/filename/filename\")\n\n\n\nOption 2: Using RStudio Interface\n\nOn the top of the RStudio menu, click on Session.\nClick Set Working Directory.\nThen click To Source File Location.\n\nTo check if the working directory is set correctly, use the following code:\n\n#| eval: false\n#| include: true\n\n# Returns the filepath of the current working directory\ngetwd()\n\n[1] \"/Users/haleydaarstad/Library/CloudStorage/Dropbox/GitHub/pol51_R\"",
    "crumbs": [
      "Setting up R",
      "Setting up a Working Directory"
    ]
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Packages and Installing Packages",
    "section": "",
    "text": "Packages are collections of R functions, data, and code compiled in a well-defined format. R functions are like the verbs of the R coding language, they tell your computer what action to make with sets of information. A function is usually defined by a keyword and then parenthesis. Functions can be built by yourself or pre-built.\nSome packages come pre-installed in R, however, the majority do not, so you need to install them first using the r function install.packages\n\ninstall.packages(\"tidyverse\") # first install this package\ninstall.packages(\"remotes\") # second install this package to download the data\n\nAfter installing the packages we need to attach the package. You will always need to reattach the a package in order to use it when you restart R. You can do this by using the function library() and the name of the package.\nIn the following examples we will be using a collection of data sets I have cleaned and you will download by using the following code:\n\n# This line of code installs a data package saved on github that I\n# created\nremotes::install_github(\"hbdaarstad/RandomData\")\n\nNow, we can begin using functions found in the tidyverse package and data from my package RandomData. Let’s work with our first data set, race_stats.\n\n?race_stats # description of the data",
    "crumbs": [
      "Base R Descriptive Statistics",
      "Packages and Installing Packages"
    ]
  },
  {
    "objectID": "baserviz.html",
    "href": "baserviz.html",
    "title": "Base R Data Visualization",
    "section": "",
    "text": "In Base R, your plot code can be divided into two major sections: Parameters, Plot attributes, and The legend. The parameter section fixes the settings for all your plots, basically you are telling it what variables and information you want it to use. The plot section is where you design your plot, such as adding labels and titles.",
    "crumbs": [
      "Base R Data Visualization"
    ]
  },
  {
    "objectID": "baserviz.html#scatter-plots",
    "href": "baserviz.html#scatter-plots",
    "title": "Base R Data Visualization",
    "section": "Scatter Plots",
    "text": "Scatter Plots\nThe first plot style we will be looking at is a scatter plot. To plot a scatter plot you will use the most common function in base r to plot it, plot() .\n\n# plot(x, y,\n#       xlab = \"Independent Variable (x)\", # Label for the x-axis\n#       ylab = \"Dependent Variable (y)\", # Label for the y-axis\n#       xlim = c(0, 12), # Limits for the x-axis\n#       ylim = c(0, 120), # Limits for the y-axis\n#       main = \"Scatterplot of the Relationship between X and Y\", \n#               Main title of the plot\n#       col = \"black\", # Color of the points\n#       pch = 19) # Shape of points\n\nIn the following example, we will plot the qualifying position for the 20 drivers and the final points they were awarded for the Las Vegas Grand Prix in 2023.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(RandomData)\n\nscatterplot &lt;- race_stats |&gt;\n  filter(circuit == \"Las Vegas Strip Street Circuit\" & year == \"2023\")\n\nplot(scatterplot$quali_position, scatterplot$points,\n     xlab= \"Qualifying Position\",\n     ylab= \"Points Awarded\",\n     xlim = c(0, 20),\n     ylim = c(0, 25), \n     main = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\",\n     col = \"black\", \n     pch = 19)\n\n\n\n\n\n\n\n\nIf you wanted to add a line that shows the correlation we can do this by adding the lines() after the plot.\n\nplot(scatterplot$quali_position, scatterplot$points,\n     xlab= \"Qualifying Position\",\n     ylab= \"Points Awarded\",\n     xlim = c(0, 20),\n     ylim = c(0, 25), \n     main = \"Qualifying Position vs. Points Awarded at Las Vegas GP 2023\",\n     col = \"black\", \n     pch = 19)\nlines(lowess(scatterplot$quali_position, scatterplot$points), col = \"red\")",
    "crumbs": [
      "Base R Data Visualization"
    ]
  },
  {
    "objectID": "baserviz.html#histograms",
    "href": "baserviz.html#histograms",
    "title": "Base R Data Visualization",
    "section": "Histograms",
    "text": "Histograms\nFrequency histograms are useful when you want to get an idea about the distribution of values in a numeric variable. The hist() is the function that plots histograms and takes a numeric vector as its main argument.\n\n# hist(data$x, \n#            col = \"color\", \n#            main = \"Main Title\",\n#            xlab = \"Label X-axsis\")\n\nIn the following example, we will look at the distribution of the final positions of the McLaren 2023 season for both of their drivers. To set up this histogram, I construct a new variable called, final_position, and save it as a new object called McLarenStandings_2023.\n\nMcLarenStandings_2023 &lt;- race_stats |&gt;\n  select(circuit, year, constructor, surname) |&gt;\n  # remove duplicates\n  unique() |&gt;\n  filter(constructor == \"McLaren\" & year == 2023) |&gt;\n  mutate(\n    final_position = case_when(\n      #PIASTRI\n      circuit == \"Bahrain International Circuit\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Jeddah Corniche Circuit\" & surname == \"Piastri\" ~ \"15\",\n      circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Piastri\" ~ \"8\", \n      circuit ==  \"Baku City Circuit\" & surname == \"Piastri\" ~ \"11\",\n      circuit ==  \"Miami International Autodrome\" & surname == \"Piastri\" ~ \"19\",\n      circuit == \"Circuit de Monaco\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Piastri\" ~ \"13\",\n      circuit == \"Circuit Gilles Villeneuve\" & surname == \"Piastri\" ~ \"11\", \n      circuit == \"Red Bull Ring\" & surname == \"Piastri\" ~ \"16\",\n      circuit == \"Silverstone Circuit\" & surname == \"Piastri\" ~ \"4\",\n      circuit == \"Hungaroring\" & surname == \"Piastri\" ~ \"5\",\n      circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Circuit Park Zandvoort\" & surname == \"Piastri\" ~ \"9\",\n      circuit == \"Autodromo Nazionale di Monza\" & surname == \"Piastri\" ~ \"12\",\n      circuit == \"Marina Bay Street Circuit\" & surname == \"Piastri\" ~ \"7\",\n      circuit == \"Suzuka Circuit\" & surname == \"Piastri\" ~ \"3\",\n      circuit == \"Losail International Circuit\" & surname == \"Piastri\" ~ \"2\",\n      circuit == \"Circuit of the Americas\" & surname == \"Piastri\" ~ \"DNF\",\n      circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Piastri\" ~ \"8\",\n      circuit == \"Autódromo José Carlos Pace\" ~ \"14\",\n      circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Piastri\" ~ \"10\",\n      circuit == \"Yas Marina Circuit\" & surname == \"Piastri\" ~ \"6\",\n        \n        # NORRIS\n        circuit == \"Bahrain International Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Jeddah Corniche Circuit\" & surname == \"Norris\" ~ \"17\",\n        circuit == \"Albert Park Grand Prix Circuit\" & surname == \"Norris\" ~ \"6\",\n        circuit ==  \"Baku City Circuit\" & surname == \"Norris\" ~ \"9\",\n        circuit ==  \"Miami International Autodrome\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit de Monaco\" & surname == \"Norris\" ~ \"9\", \n        circuit == \"Circuit de Barcelona-Catalunya\" & surname == \"Norris\" ~ \"17\", \n        circuit == \"Circuit Gilles Villeneuve\" & surname == \"Norris\" ~ \"13\",\n        circuit == \"Red Bull Ring\" & surname == \"Norris\" ~ \"4\", \n        circuit == \"Silverstone Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Hungaroring\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Circuit de Spa-Francorchamps\" & surname == \"Norris\" ~ \"7\",\n        circuit == \"Circuit Park Zandvoort\" & surname == \"Norris\" ~ \"9\",\n        circuit == \"Autodromo Nazionale di Monza\" & surname == \"Norris\" ~\"8\",\n        circuit == \"Marina Bay Street Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Suzuka Circuit\" & surname == \"Norris\" ~ \"2\",\n        circuit == \"Losail International Circuit\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Circuit of the Americas\" & surname == \"Norris\" ~ \"3\",\n        circuit == \"Autódromo Hermanos Rodríguez\" & surname == \"Norris\" ~ \"5\",\n        circuit == \"Autódromo José Carlos Pace\" ~ \"2\",\n        circuit == \"Las Vegas Strip Street Circuit\" & surname == \"Norris\" ~ \"DNF\",\n        circuit == \"Yas Marina Circuit\" & surname == \"Norris\" ~ \"5\"\n        )\n  ) \n\n# change from a character to numeric\nMcLarenStandings_2023 &lt;- McLarenStandings_2023 |&gt;\n  mutate(final_position_numeric = ifelse(final_position == \"DNF\", 0, as.numeric(final_position)))\n\n# make histogram\nhist(McLarenStandings_2023$final_position_numeric, \n  # change color\n  col = \"orange\", \n  # add main title\n  main = \"McLaren Race Results 2023\", \n  # add title on x-axsis\n  xlab = \"Race Results\")",
    "crumbs": [
      "Base R Data Visualization"
    ]
  },
  {
    "objectID": "baserviz.html#box-plots",
    "href": "baserviz.html#box-plots",
    "title": "Base R Data Visualization",
    "section": "Box Plots",
    "text": "Box Plots\nBoxplots (or box-and-whisker plots) are useful to graphically summarise the distribution of a variable, identify potential unusual values and compare distributions between different groups. We use the function boxplot() . I use the new data set and new variable I constructed in the previous example for histograms.\n\n# boxplot(data$y ~ data$x, \n#               col = \"color\", \n#               main = \"Main Title\",\n#               ylab = \"Label Y-axsis\",\n#               xlab = \"Label X-axsis\")\n\nIn the example we will be using, plots the final position standings for the two McLaren Drivers during the 2023 season.\n\n# Boxplot for average race result in 2023 for McLaren Drivers\nboxplot(McLarenStandings_2023$final_position_numeric ~ McLarenStandings_2023$surname, \n        # add color for each driver\n        col = c(\"orange\", \"grey\"), \n        # add title\n        main = \"McLaren Race Results\", \n        # add title for y-axsis\n        ylab = \"Final Position\", \n        # add title on x-axsis\n        xlab = \"Driver\")\n\n\n\n\n\n\n\n\nThe thick horizontal line in the middle of the box is the median of the final positions for the two drivers. The upper line of the box is the upper quartile, the 75th percentile, and the lower line is the lower quartile, the 25th percentile. The distance between the upper and lower quartiles is known as the inter quartile range and represents where 50 percent of final position standings on average were for the two drivers. The dotted vertical lines are called the whiskers and their length is determined as 1.5 x the inter quartile range and any points outside the whiskers are potential outliers.",
    "crumbs": [
      "Base R Data Visualization"
    ]
  },
  {
    "objectID": "baserviz.html#time-series",
    "href": "baserviz.html#time-series",
    "title": "Base R Data Visualization",
    "section": "Time Series",
    "text": "Time Series\nA time series plot looks at a variable over time to see trends. To make a time series graph, we use the same function as scatter plots, plot(), however, we change the type of graph from a point to a line graph. We can do this by changing the type = in the function from a type = \"p\" to a type = \"l\". In addition, the variable on the x-axis should always be a variable that measures time.\n\n# Time Series Plot\n# plot(data$y ~ data$timevariable,\n#                type =\"l\",\n#                col = \"color\", \n#               main = \"Main Title\",\n#               ylab = \"Label Y-axsis\",\n#               xlab = \"Label X-axsis\")\n\nIn the following example, we look at the total wins for Ferrari drivers over time. In this example, we are using the data set constructors_stats.\n\n?constructors_stats\n\n# Calculate total wins per year for Ferrari\nferrari_wins &lt;- constructors_stats |&gt;\n  filter(constructor == \"Ferrari\") |&gt;\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(constructor_wins)))\n\n## Make Time Series plot\nplot(ferrari_wins$total_wins ~ ferrari_wins$year,\n     # make it a line not points\n     type = \"l\", \n     # add color\n     col = c(\"red\"), \n     # change width of the line\n     lwd = 2, \n     # add main title\n     main = \"Ferrari Wins 1958 to 2024 (Before the Summer Break)\",\n      # add title on x-axsis\n     xlab = \"Year\", \n      # add title on y-axsis\n     ylab = \"Wins\")",
    "crumbs": [
      "Base R Data Visualization"
    ]
  },
  {
    "objectID": "baserviz.html#more-adv.-code-for-base-r-visualization",
    "href": "baserviz.html#more-adv.-code-for-base-r-visualization",
    "title": "Base R Data Visualization",
    "section": "More Adv. Code for Base R Visualization",
    "text": "More Adv. Code for Base R Visualization\nNow that you know the basics, we can add more details and change things.\nI have provided some examples. In the first example, I add three different box plots with different colors and I adjust opacity of the colors.\n\n## BOX PLOT ##\n\n# Wrangle the Data\nthebigthree &lt;- constructors_stats |&gt;\n  # Filter for the top 3 constructors since 2016 \n  filter((constructor == \"Mercedes\" | constructor == \"Red Bull\" | constructor == \"Ferrari\") &            year &gt; 2016)  |&gt;\n  # calculate total wins per year per constructor\n  group_by(constructor, year) |&gt; \n  summarize(total_wins = sum(constructor_wins))\n\n`summarise()` has grouped output by 'constructor'. You can override using the\n`.groups` argument.\n\n# Create boxplot\nboxplot(total_wins ~ constructor, \n        data = thebigthree,\n        main = \"The Big Three Constructor Wins Since 2016\",\n        xlab = \"Constructor\",\n        ylab = \"Wins\",\n        col = c(adjustcolor(\"red\", alpha.f = 0.4), # alpha.f adjusts the opacity\n                adjustcolor(\"grey\", alpha.f = 0.4),\n                adjustcolor(\"blue\", alpha.f = 0.4)))\n\n\n\n\n\n\n\n\nIn my second example, I add two more lines to my time series graph, change their colors, and also add a legend.\n\n## TIME SERIES ##\n\n# Wrangle the Data\n\n# Avg wins for all drivers since 2006\navg_wins &lt;- driver_stats |&gt;\n    filter(year &gt; 2006) |&gt;\n    group_by(surname, year) |&gt; \n    summarize(\n      max_wins = max(driver_wins)) |&gt;\n    ungroup() |&gt;\n    group_by(year) |&gt;\n  summarize(\n      total_wins = mean(max_wins))\n\n`summarise()` has grouped output by 'surname'. You can override using the\n`.groups` argument.\n\n# Avg wins for Lewis Hamilton since joining the grid in 2007\nhamilton &lt;- driver_stats |&gt;\n  # Filter for the Lewis Hamilton\n  filter(surname == \"Hamilton\")  |&gt;\n  # calculate total wins per year for Hamilton\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(driver_wins)))\n\n# Avg wins for Max Verstappen since joining the grid in 2015\nverstappen &lt;- driver_stats |&gt;\n  # Filter for Max Verstappen\n  filter(surname== \"Verstappen\")  |&gt;\n  # calculate total wins per year for Verstappen\n  group_by(year) |&gt; \n  summarize(total_wins = sum(max(driver_wins)))\n\n# Create Time Series Plot\nplot(avg_wins$year, avg_wins$total_wins, type = \"l\",\n     col = \"grey\",\n     main = \"Total Wins Over Time\",\n     xlab = \"Year\",\n     ylab = \"Total Wins\",\n     ylim = range(c(avg_wins$total_wins,\n                    hamilton$total_wins,\n                    verstappen$total_wins\n     )))\n    \n\n# Add lines for Hamilton and Verstappen\nlines(hamilton$year, hamilton$total_wins, col = \"turquoise\", type = \"l\")\nlines(verstappen$year, verstappen$total_wins, col = \"red\", type = \"l\")\n\n# Add a legend to the plot\nlegend(\"topleft\", legend = c(\"Avg.\", \"Hamilton\", \"Verstappen\"),\n       col = c(\"grey\", \"turquoise\", \"red\"), lty = 1, cex = 0.8)",
    "crumbs": [
      "Base R Data Visualization"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setting up R",
    "section": "",
    "text": "There are four primary quadrants in RStudio:\n\nSource pane\nConsole pane\nEnvironment pane\nOutput pane\n\n\n\n\nRStudio Layout\n\n\nThe source pane allows us to edit and view various code-related files, such as .R, .rmd, .qmd, .py, .css, or general text files such as .txt or .md.\n\nTo open an existing file, use either the File → Open File… menu or the Recent Files menu to select from recently opened files.\nYou can create a new file via the File → New File menu.\n\nThe console pane provides an area to interactively execute code.\nThe environment pane includes the Environment, History, Connections, Build, and Version Control System (VCS) tabs and displays any currently saved objects.\nThe output pane displays various outputs, such as plots, and contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs."
  },
  {
    "objectID": "setup.html#layout-of-r",
    "href": "setup.html#layout-of-r",
    "title": "Setting up R",
    "section": "",
    "text": "There are four primary quadrants in RStudio:\n\nSource pane\nConsole pane\nEnvironment pane\nOutput pane\n\n\n\n\nRStudio Layout\n\n\nThe source pane allows us to edit and view various code-related files, such as .R, .rmd, .qmd, .py, .css, or general text files such as .txt or .md.\n\nTo open an existing file, use either the File → Open File… menu or the Recent Files menu to select from recently opened files.\nYou can create a new file via the File → New File menu.\n\nThe console pane provides an area to interactively execute code.\nThe environment pane includes the Environment, History, Connections, Build, and Version Control System (VCS) tabs and displays any currently saved objects.\nThe output pane displays various outputs, such as plots, and contains the Files, Plots, R Packages, Help, Tutorial, Viewer, and Presentation tabs."
  },
  {
    "objectID": "setup.html#setting-up-a-working-directory",
    "href": "setup.html#setting-up-a-working-directory",
    "title": "Setting up R",
    "section": "Setting up a Working Directory",
    "text": "Setting up a Working Directory\nIt is important to keep all the files associated with a given project, such as data, scripts, analytical results, and figures, together. To do this we need to make a working directory.\n\nTo create a new working directory in RStudio:\n\nUse File → New Project or use the New Project button (available on the Projects toolbar in the top right corner or on the global toolbar at the top left corner).\nThis will open the “New Project Wizard” popup.\nClick “New Directory”.\n\n\n\nTo set the working directory, there are two possible ways, using code or using RStudio directly:\n\nOption 1: Using R Code\n\n# Set working directory (replace this with your own)\nsetwd(\"/Users/yourname/Desktop/filename/filename\")\n\n\n\nOption 2: Using RStudio Interface\n\nOn the top of the RStudio menu, click on Session.\nClick Set Working Directory.\nThen click To Source File Location.\n\nTo check if the working directory is set correctly, use the following code:\n\n#| eval: false\n#| include: true\n\n# Returns the filepath of the current working directory\ngetwd()\n\n[1] \"/Users/haleydaarstad/Library/CloudStorage/Dropbox/GitHub/pol51_R\""
  },
  {
    "objectID": "correlations.html",
    "href": "correlations.html",
    "title": "Correlations",
    "section": "",
    "text": "Correlations\nCorrelations are used to understand a relationship between two variables.\nIt is important to understand that correlations DO NOT say anything about how much Y changes when X changes. Rather it only describes the ‘relationship’ between two variables.\nCorrelations can describe two things: direction and strength of a relationship.\n\nDirection (+/-)\n\nA positive correlation means that when one variable increases another variable increases as well.\nA negative correlation means that when one variable goes up another variable decreases.\n\n\n\nStrength\n\nCorrelations range from -1.0 to +1.0.\nThe closer it is to +1 or -1, the more closely the two variables are related. (Strong)\nIf the correlation is close to 0, it means there is no relationship.\n\nFurthermore, to describe correlations we look at the direction (positive or negative) and strength (the number)\n\nStrong: the relationship is very consistent\nWeak: the relationship exists, but is not very strong or consistent\nPositive: when one variable increases, the other tends to increase\nNegative: when one variable increases, the other tends to decrease\n\nREMINDER: THE NUMERICAL VALUE DOES NOT DESCRIBE HOW MUCH CHANGE JUST THE STRENGTH OF THE RELATIONSHIP.\n\n\n\nExample 1:\nIn the first example, we are looking a randomly generated data to see how we can identify correlations visually based on scatter plots. I have provided 5 examples.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nset.seed(123)\n\nx = rnorm(100, mean = 1, sd = .5)\ny = rnorm(100, mean = 1, sd = 0.5)\n\nd1 &lt;- data.frame(x = x,\n                 y = y + x*.5)\nd2 &lt;- data.frame(x = x,\n                 y = y + x*-.5)\nd3 &lt;- data.frame(x = x,\n                 y = y + x*1)\nd4 &lt;- data.frame(x = x,\n                 y = y + x*-1)\nd5 &lt;- data.frame(x = x,\n                 y = y)\n\n# visualize the correlations through a scatter plot\n\n# weak positive correlation\nggplot(d1, aes(x, y)) +\ngeom_point()  +\n labs(title=\"Weak Positive Correlation Between X and Y\")\n\n\n\n\n\n\n\n# weak negative correlation\nggplot(d2, aes(x, y)) +\ngeom_point()  +\n labs(title= \"Weak Negative Correlation Between X and Y\")\n\n\n\n\n\n\n\n# strong positive correlation\nggplot(d3, aes(x, y)) +\ngeom_point()  +\n labs(title=\"Strong PositiveCorrelation Between X and Y\")\n\n\n\n\n\n\n\n# strong negative correlation\nggplot(d4, aes(x, y)) +\ngeom_point()  +\n labs(title=\"Strong Negative Correlation Between X and Y\")\n\n\n\n\n\n\n\n# no correlation\nggplot(d5, aes(x, y)) +\ngeom_point() +\n labs(title=\"No Correlation Between X and Y\")\n\n\n\n\n\n\n\n\n\n\nExample 2:\nNow in example 2, I have randomly generated data on a fake data set to understand how to use the the cor() function and how to visually plot correlations to illustrate it.\n\nage &lt;- sample(18:100, 100, replace = TRUE)\ngender &lt;- sample(c(1, 0), 100, replace = TRUE)  # 1 = Female, 0 = Male\nkids &lt;- sample(0:5, 100, replace = TRUE)\n\n# Now build the data.frame with dependent vars defined inline\ndata &lt;- data.frame(\n  age = age,\n  gender = gender,\n  height = rnorm(100, mean = 5.5, sd = 0.75) + gender * -0.25,\n  kids = kids,\n  income = rnorm(100, mean = 45000, sd = 10000) + age * 1000 + gender * (-2000) + kids * (-3000),\n  years_edu = sample(10:23, 100, replace = TRUE) + age * 1 + gender * 2\n)\n\nhead(data)\n\n  age gender   height kids    income years_edu\n1  40      0 5.480122    3  73470.91        53\n2  84      0 5.324767    1 135526.80       100\n3  26      1 4.814127    5  51245.85        46\n4  78      0 5.015744    5  95671.94        99\n5  56      0 5.242842    2  97375.04        68\n6  48      0 4.243953    1 100512.59        70\n\n\nThe cor() function allows us to clalculate the correlation between two or more variables. My first example is looking at only variables and then visualizing it through a scatter plot.\n\n# correlation for only two variables\ncor(data$age, data$income)\n\n[1] 0.9260033\n\n# visualize the correlations through a scatter plot\nggplot(data, aes(x = age, y = income)) +\ngeom_point()\n\n\n\n\n\n\n\n\nSince the correlation score is 0.89, we can determine there is strong positive relationship between age and income, stating that as age increases so does income. Which is seen in our scatter plot as well.\nNext, we will examine our full data set. Doing this only works if you have only numerical values, it does not work for non numerical values.\n\n# correlations for all variables in the dataset\ncor(data)\n\n                  age      gender      height        kids      income\nage        1.00000000  0.01613562  0.12926437 -0.04294040  0.92600327\ngender     0.01613562  1.00000000 -0.24154026  0.02198794 -0.02963598\nheight     0.12926437 -0.24154026  1.00000000  0.01487277  0.09756631\nkids      -0.04294040  0.02198794  0.01487277  1.00000000 -0.26536753\nincome     0.92600327 -0.02963598  0.09756631 -0.26536753  1.00000000\nyears_edu  0.98540459  0.08326801  0.11777500 -0.05497819  0.91578590\n            years_edu\nage        0.98540459\ngender     0.08326801\nheight     0.11777500\nkids      -0.05497819\nincome     0.91578590\nyears_edu  1.00000000\n\n\nWe can visualize this using the ggcorrplot() function.\n\n# install.packages(\"ggcorrplot\")\nlibrary(ggcorrplot) # for ggcorrplot()\n\n# save correlation values as a variable\ncor_data &lt;- cor(data)\n\n# plot the correlation values\nggcorrplot(cor_data)",
    "crumbs": [
      "Random Data Generation and Hypothesis Testing",
      "Correlations"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Types",
    "section": "",
    "text": "There are 6 types of data in R that are important to know, but the essential ones are logical, numeric, and character.\nLogical Also known as boolean data, logical data is shown as TRUE or FALSE values:\n\nlogical1 &lt;- TRUE\nlogical2 &lt;- FALSE\n\n# The class() function outputs the data type of the object\nclass(logical1)\n\n[1] \"logical\"\n\nprint(logical2)\n\n[1] FALSE\n\nprint(class(logical2))\n\n[1] \"logical\"\n\n\nNumeric represents all data types that are real numbers with or with out decimal points.\n\nheight &lt;- 5.5\nacres &lt;- 1000\n\nclass(height)\n\n[1] \"numeric\"\n\nprint(acres)\n\n[1] 1000\n\nprint(class(acres))\n\n[1] \"numeric\"\n\n\nCharacter specifies character or string values in a variable such as a singular character ‘A’ or a string of characters in ‘Apple’.\n\n# Use '' or \"\" to show it's a string of characters\nmotorsports &lt;- \"formula1\"\n\nprint(motorsports)\n\n[1] \"formula1\"\n\nprint(class(motorsports))\n\n[1] \"character\"\n\n\nInteger specifies real values without decimal points\n\n# the suffix i specifies its imaginary data.\ncomplex &lt;- 3 + 2i\n\nprint(class(integer))\n\n[1] \"function\"\n\n\nRaw specifies values as raw bytes\n\n# convert character to raw\nraw_variable &lt;- charToRaw(\"Welcome to Programiz\")\n\nprint(raw_variable)\n\n [1] 57 65 6c 63 6f 6d 65 20 74 6f 20 50 72 6f 67 72 61 6d 69 7a\n\nprint(class(raw_variable))\n\n[1] \"raw\"\n\n# convert raw to character\nchar_variable &lt;- rawToChar(raw_variable)\n\nprint(char_variable)\n\n[1] \"Welcome to Programiz\"\n\nprint(class(char_variable))\n\n[1] \"character\"",
    "crumbs": [
      "Base R Syntax",
      "Data Types"
    ]
  }
]